{"version":3,"sources":["Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Profile/MyPosts/MyPosts.module.css","Profile/MyPosts/Post/Post.module.css","Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.tsx","Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","Profile/MyPosts/Post/Post.tsx","Profile/MyPosts/MyPosts.tsx","Profile/MyPosts/MyPostsContainer.tsx","Profile/Profile.tsx","Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","alt","Preloader","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","map","p","i","postsBlock","values","addPost","newPostText","connect","state","profilePage","Profile","MyPostsContainer","ProfileContainer","userId","match","params","String","authorizedUserId","history","push","getUserProfile","getStatus","AuthRedirectComponent","withAuthRedirect","withRouter","auth","isAuth"],"mappings":"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","file":"static/js/3.aad13f5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__w7-vB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__yxqJL\",\"posts\":\"MyPosts_posts__2cETP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__3LncI\",\"item\":\"Post_item__1awDx\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropstype = {\r\n    status: string | null\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropstype> = (props) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        if (status) props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n                </div>}\r\n                { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\r\n                           value={status ? status : ''} />\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../assets/common/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport {ProfileType} from \"../../../types\";\r\n\r\n\r\n type ProfileInfoPropsType = {\r\n      profile: ProfileType |  null\r\n      status: string | null\r\n      updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile,status,updateStatus}) => {\r\n    if(!profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <img src={profile.photos.large} alt={\"try again later\"}/>\r\n            <ProfileStatusWithHooks status={status}\r\n            updateStatus={updateStatus}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType ) => {\r\n    return (\r\n         <div className={s.item}>\r\n             <img src='https://sun9-35.userapi.com/impf/HLP5CRTKbRvZisagdIWhrAzNRGxoFve9ZFJwLQ/ezCvng_UZZM.jpg?size=864x1080&quality=96&sign=439b5cff05a0cf4601e2b7c9f7625386&type=album' />\r\n             {props.message}\r\n             <div> <span>like</span> {props.likesCount}\r\n              </div>\r\n          </div>\r\n          \r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostsPropsType} from \"../../Redux/profile-reducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utilities/validators/Validators\";\r\nimport {Textarea} from \"../../assets/common/FormsControls/FormsControls\";\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string\r\n    addPost: (newPostText: any) => void\r\n    // onPostChange: (text: string) => void\r\n    // updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n    function AddNewPostForm(props: any) {\r\n        return <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field name=\"newPostText\" component={Textarea}\r\n                       placeholder={\"Post message\"}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n              {/*  <textarea onChange={props.onChange} value={props.value}/>*/}\r\n            </div>\r\n            <div>\r\n               {/* <button onClick={props.onClick}>Add post</button>*/}\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>;\r\n    }\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nconst MyPosts = React.memo((props:MyPostsPropsType) => {\r\n\r\n    let postsElements = props.posts.map((p, i) => <Post key={i} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n  /*  let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            props.updateNewPostText(e.currentTarget.value);\r\n    }*/\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3> My posts </h3>\r\n              {/*  <AddNewPostForm onChange={onPostChange} value={props.newPostText} onClick={onAddPost}/>*/}\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n})\r\n\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {addPost, PostsPropsType} from \"../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../Redux/redux-store\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string\r\n}\r\nexport type MapDispatchToPropsType = {\r\n //   updateNewPostText: (text: string) => void\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n// const mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n//     return {\r\n//         updateNewPostText: (text: string) => {\r\n//             let action = updateNewPostTextActionCreator(text);\r\n//             dispatch(action)\r\n//         },\r\n//         addPost: () => {\r\n//             dispatch(addPostActionCreator());\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>\r\n(mapStateToProps, {addPost})(MyPosts) /*as ConnectedComponent<any, {}>*/","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../types\";\r\n\r\nexport type ProfilePropsType = {\r\n        profile: ProfileType | null\r\n        updateStatus: (status:string) => void\r\n        status: string | null\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n           <MyPostsContainer />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {RootStateRedux} from \"../Redux/redux-store\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../Redux/profile-reducer\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../types\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: any\r\n    status: string | null\r\n    isAuth: boolean\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    /* setUserProfile: (data: any) => void*/\r\n    updateStatus: (status: string) => void\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\ntype AllPropsType = RouteComponentProps<PathParamsType> & PropsType\r\n\r\nconst ProfileContainer = (props: AllPropsType) => {\r\n    let userId = props.match.params.userId\r\n    useEffect(() => {\r\n\r\n        if (!userId) {\r\n            userId = String(props.authorizedUserId)\r\n        }\r\n        if (!userId) {\r\n            props.history.push('/login')\r\n        }\r\n        props.getUserProfile(+userId)\r\n    })\r\n\r\n    if (props.profile) {\r\n        props.getStatus(+props.profile.userId)\r\n    }\r\n\r\n    return (\r\n        <Profile profile={props.profile} updateStatus={props.updateStatus} status={props.status}/>\r\n    )\r\n}\r\n\r\n\r\n// class ProfileContainer1 extends React.Component<AllPropsType> {\r\n//     componentDidMount() {\r\n//         let userId: number | undefined = this.props.match.params.userId ? Number(this.props.match.params.userId) : undefined\r\n//         if (!userId) {\r\n//             userId = this.props.authorizedUserId\r\n//             if (!userId) {\r\n//                 this.props.history.push(\"/login\")\r\n//             }\r\n//         }\r\n//         this.props.getUserProfile(2)\r\n//         this.props.getStatus(2)\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <Profile {...this.props}\r\n//                      profile={this.props.profile}\r\n//                      status={this.props.status}\r\n//                      updateStatus={this.props.updateStatus}\r\n//             />\r\n//         );\r\n//     }\r\n// }\r\n\r\nlet mapStateToProps = ( state: RootStateRedux): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n\r\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n//     withRouter,\r\n//     // withAuthRedirect\r\n// )(ProfileContainer)\r\n\r\nexport default withRouter(connect(mapStateToProps,{getUserProfile, getStatus, updateStatus})(ProfileContainer))\r\n\r\n/*\r\n connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>(mapStateToProps, {getUserProfile}) (WithUrlDataContainerComponent)*/\r\n"],"sourceRoot":""}