{"version":3,"sources":["components/Profile/Dialogs/Dialogs.module.css","components/Profile/Dialogs/DialogItem/DialogItem.tsx","components/Profile/Dialogs/Message/Message.tsx","components/Profile/Dialogs/AddMessageForm.tsx","components/Profile/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Profile/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","s","dialog","active","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsWithRedirect","isAuth","auth","compose","connect","dispatch","actions","sendMessageCreator","WrappedComponent","restProps","to"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6FCiBnKC,EATI,SAACC,GAChB,IAAIC,EAAO,aAAeD,EAAME,GAEhC,OAAO,qBAAK,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAAS,GAAIJ,EAAb,SAAoBD,EAAMM,UCDnBC,EALC,SAACP,GACb,OAAO,qBAAK,UAAU,UAAf,SAA0BA,EAAMQ,W,yBCFrCC,EAAcC,YAAiB,IAmBtBC,cAA8B,CAACC,KAAM,wBAArCD,EAbgF,SAACX,GAC5F,OACI,uBAAMa,SAAUb,EAAMc,aAAtB,UACI,8BACKC,YAAsC,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,OAE5G,8BACI,kDCuBDC,EAzBsB,SAAClB,GAElC,IAAImB,EAAQnB,EAAMoB,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuB,KAAMA,EAAElB,KAAM,GAAIkB,EAAEtB,IAA1BsB,EAAEtB,OAC5DuB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoB,QAASA,EAAEnB,SAAjBmB,EAAEzB,OAO/D,OACI,sBAAK,UAAWC,IAAEmB,QAAlB,UACI,qBAAK,UAAWnB,IAAEyB,aAAlB,SACKP,IAEL,qBAAK,UAAU,WAAf,SACI,8BAAMI,MAEV,cAAC,EAAD,CAAgB,SAZF,SAACI,GACnB7B,EAAM8B,YAAYD,EAAOE,uB,uCChB7BC,EAA8B,SAACb,GAAD,MAAiD,CAC/Ec,OAAQd,EAAMe,KAAKD,SCiBRE,sBACXC,aAXkB,SAACjB,GAAD,MAAiD,CAACC,YAAaD,EAAMC,gBAElE,SAACiB,GAAD,MACrB,CACIP,YAAa,SAACC,GACVM,EAASC,IAAQC,mBAAmBR,UDTzC,SAA+BS,GASlC,OADmCJ,YAAQJ,EAARI,EAPsB,SAACpC,GACzBA,EAAxBiC,OAD4D,IACjDQ,EADgD,YACnCzC,EADmC,YAEhE,OAAKA,EAAMiC,OAEJ,cAACO,EAAD,eAAsBC,IAFH,cAAC,IAAD,CAAUC,GAAG,gBCWhCP,CACsHjB","file":"static/js/4.0da22dac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1YNBI\",\"dialogsItems\":\"Dialogs_dialogsItems__1ZdD8\",\"active\":\"Dialogs_active__2m-b8\",\"messages\":\"Dialogs_messages__2Wn2N\",\"message\":\"Dialogs_message__2_Sk4\"};","import React from 'react';\rimport s from '../Dialogs.module.css';\rimport {NavLink} from \"react-router-dom\";\r\rtype DialogItemPropsType = {\r    id: number\r    name: string\r}\r\rconst DialogItem = (props: DialogItemPropsType) => {\r    let path = \"/dialogs/1\" + props.id;\r\r    return <div className={s.dialog + ' ' + s.active}>\r        <NavLink to={path}>{props.name}</NavLink>\r    </div>\r}\r\r\rexport default DialogItem;","import React from 'react';\rimport s from '../Dialogs.module.css';\r\rtype MessagePropsType = {\r    message: string\r}\r\rconst Message = (props: MessagePropsType) => {\r    return <div className=\"message\">{props.message}</div>\r}\r\r\rexport default Message","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../../assets/common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utilities/validators/Validators\";\r\nimport React from \"react\";\r\nimport {NewMessageFormType} from \"./Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport type NewMessageFormValuesKeys = Extract<keyof NewMessageFormType, string>\r\n\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeys>(\"Enter your message\", \"newMessageBody\", [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n","import React from 'react';\rimport s from './Dialogs.module.css';\rimport DialogItem from \"./DialogItem/DialogItem\";\rimport Message from \"./Message/Message\";\rimport {InitialStateType} from \"../../../redux/dialogs-reducer\";\rimport AddMessageForm from \"./AddMessageForm\";\r\r\rtype PropsType = {\r    dialogsPage: InitialStateType\r    sendMessage: (newMessageBody: string) => void\r}\r\rexport type  NewMessageFormType = {\r    newMessageBody: string;\r}\r\rconst Dialogs: React.FC<PropsType> = (props) => {\r\r    let state = props.dialogsPage;\r    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\r\r    const addNewMessage = (values: NewMessageFormType) => {\r        props.sendMessage(values.newMessageBody);\r    }\r\r    return (\r        <div className={s.dialogs}>\r            <div className={s.dialogsItems}>\r                {dialogsElements}\r            </div>\r            <div className=\"messages\">\r                <div>{messagesElements}</div>\r            </div>\r            <AddMessageForm onSubmit={addNewMessage}/>\r        </div>\r    )\r}\r\r\rexport default Dialogs;","import React from 'react'\r\nimport {Redirect} from 'react-router'\r\nimport {RootStateRedux} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsWithRedirect = (state: RootStateRedux): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapStateToPropsType)\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapStateToPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!props.isAuth) return <Redirect to=\"/login\"/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsWithRedirect)(RedirectComponent)\r\n    return ConnectAuthRedirectComponent\r\n}","import React from 'react';\rimport {actions, InitialStateType} from \"../../../redux/dialogs-reducer\";\rimport Dialogs from \"./Dialogs\";\rimport {connect} from \"react-redux\";\rimport {RootStateRedux} from \"../../../redux/redux-store\";\rimport {compose, Dispatch} from \"redux\";\rimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\r\rtype MapStateToPropsType = {\r    dialogsPage: InitialStateType\r}\r\rtype MapDispatchToPropsType = {\r    sendMessage: (newMessageBody: string) => void\r}\r\rlet mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({dialogsPage: state.dialogsPage})\r\rlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => (\r    {\r        sendMessage: (newMessageBody: string) => {\r            dispatch(actions.sendMessageCreator(newMessageBody))\r        }\r    })\r\r\rexport default compose<React.ComponentType>(\r    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)"],"sourceRoot":""}