{"version":3,"sources":["Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Profile/MyPosts/Post/Post.module.css","Navbar/Navbar.module.css","Navbar/Navbar.tsx","Profile/News/News.tsx","Profile/Music/Music.tsx","Profile/Settings/Settings.tsx","Redux/dialogs-reducer.ts","Profile/Dialogs/DialogItem/DialogItem.tsx","Profile/Dialogs/Message/Message.tsx","assets/common/FormsControls/FormsControls.tsx","utilities/validators/Validators.tsx","Profile/Dialogs/Dialogs.tsx","Profile/Dialogs/DialogsContainer.tsx","Redux/users-selectors.ts","Users/UsersContainer.tsx","Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","assets/images/Spin-1.4s-137px (1).svg","Redux/profile-reducer.ts","Profile/MyPosts/MyPosts.tsx","Profile/MyPosts/Post/Post.tsx","Profile/MyPosts/MyPostsContainer.tsx","Header/Header.tsx","Redux/auth-reducer.ts","Login/LoginForm.tsx","reportWebVitals.js","Redux/sidebar-reducer.ts","Redux/redux-store.ts","index.tsx","Profile/Dialogs/Dialogs.module.css","assets/common/FormsControls/FormsControls.module.css","Users/Users.module.css","Profile/MyPosts/MyPosts.module.css","Header/Header.module.css"],"names":["module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","News","props","Music","Settings","SEND_MESSAGE","initialState","dialogs","id","name","messages","message","newMessageBody","dialogsReducer","state","action","type","body","DialogItem","path","dialog","Message","FormControl","meta","touched","error","children","hasError","formControl","Textarea","input","restProps","Input","required","value","maxLengthCreator","maxLength","length","dialogsElements","dialogsPage","map","d","messagesElements","m","mapStateToProps","getUsersState","UsersContainer","SET_USER_PROFILE","SET_STATUS","profileReducer","Post","likesCount","header","LoginForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","rootReducer","combineReducers","profilePage","sidebar","usersReducer","auth","authReducer","form","formReducer","appReducer"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,iBAAmB,wC,oBCArCD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,KAAO,qB,mBCAzDD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,2MCiCtEC,EA1BA,WACX,OACI,sBAAKC,UAAWC,IAAEC,IAAlB,UACA,qBAAKF,UAAWC,IAAEE,KAAlB,SACC,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAEK,WAA1C,wBAED,qBAAKN,UAAS,UAAKC,IAAEE,KAAP,YAAeF,IAAEM,QAA/B,SACC,cAAC,IAAD,CAASH,GAAG,WAAWC,gBAAiBJ,IAAEK,WAA1C,yBAEG,qBAAKN,UAAS,UAAKC,IAAEE,KAAP,YAAeF,IAAEM,QAA/B,SACI,cAAC,IAAD,CAASH,GAAG,SAASC,gBAAiBJ,IAAEK,WAAxC,sBAER,qBAAMN,UAAS,UAAKC,IAAEE,KAAP,YAAeF,IAAEM,QAAhC,SACI,cAAC,IAAD,CAASH,GAAG,QAAQC,gBAAiBJ,IAAEK,WAAvC,qBAEJ,qBAAKN,UAAS,UAAKC,IAAEE,KAAP,YAAeF,IAAEM,QAA/B,SACI,cAAC,IAAD,CAASH,GAAG,SAASC,gBAAiBJ,IAAEK,WAAxC,sBAEJ,qBAAKN,UAAS,UAAKC,IAAEE,KAAP,YAAeF,IAAEM,QAA/B,SACI,cAAC,IAAD,CAASH,GAAG,YAAYC,gBAAiBJ,IAAEK,WAA3C,6BCZGE,EARF,SAACC,GACV,OACI,yBCCOC,EARD,WACV,OACI,yBCWOC,EARE,SAACF,GACd,OACI,yB,uBCRFG,EAAe,eAiBjBC,EAAe,CACfC,QAAS,CACL,CAACC,GAAI,EAAGC,KAAM,UACd,CAACD,GAAI,EAAGC,KAAM,UACd,CAACD,GAAI,EAAGC,KAAM,SACd,CAACD,GAAI,EAAGC,KAAM,UACd,CAACD,GAAI,EAAGC,KAAM,SACd,CAACD,GAAI,EAAGC,KAAM,WAElBC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,MACjB,CAACH,GAAI,EAAGG,QAAS,8BACjB,CAACH,GAAI,EAAGG,QAAS,MACjB,CAACH,GAAI,EAAGG,QAAS,MACjB,CAACH,GAAI,EAAGG,QAAS,OAErBC,eAAgB,IAqCLC,EAxBQ,WAA2F,IAA1FC,EAAyF,uDAA/DR,EAAcS,EAAiD,uCAE7G,OAAQA,EAAOC,MAGX,KAAKX,EACD,IAAIY,EAAOF,EAAOH,eAClB,OAAO,2BACAE,GADP,IAGIJ,SAAS,GAAD,mBAAMI,EAAMJ,UAAZ,CACJ,CAACF,GAAI,EAAGG,QAASM,OAE7B,QACI,OAAOH,I,iBC3CJI,EATI,SAAChB,GAChB,IAAIiB,EAAO,aAAejB,EAAMM,GAEhC,OAAQ,qBAAK,UAAWd,IAAE0B,OAAS,IAAM1B,IAAEM,OAAnC,SACJ,cAAC,IAAD,CAAS,GAAImB,EAAb,SAAoBjB,EAAMO,UCAnBY,EANC,SAACnB,GACb,OAAO,qBAAK,UAAU,UAAf,SAA0BA,EAAMS,W,2CCJrCW,EAA2C,SAAC,GAAuC,IAAD,IAArCC,KAAOC,EAA8B,EAA9BA,QAAQC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAChEC,EAAWH,GAAWC,EAE5B,OAAO,sBAAKhC,UAAWC,IAAEkC,YAAc,KAAOD,EAAWjC,IAAE+B,MAAQ,IAA5D,UACH,8BACKC,IAEJC,GAAY,+BAAOF,QAIfI,EAAyC,SAAC3B,GAAW,IACvD4B,EAA4B5B,EAA5B4B,MAAeC,GAAa7B,EAAtBqB,KADgD,YAC1BrB,EAD0B,mBAE7D,OAAO,cAAC,EAAD,2BAAiBA,GAAjB,aAAwB,oDAAc4B,GAAWC,QAG/CC,EAAsC,SAAC9B,GAAW,IACpD4B,EAA6B5B,EAA7B4B,MAAgBC,GAAa7B,EAAtBqB,KAD4C,YACtBrB,EADsB,mBAE5D,OAAO,cAAC,EAAD,2BAAiBA,GAAjB,aAAwB,iDAAW4B,GAAWC,QCpB1CE,EAAW,SAACC,GACtB,IAAGA,EACH,MAAO,sBAGGC,EAAmB,SAACC,GAAD,OAAoB,SAACF,GACjD,GAAGA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,c,2VCSS,SAAClC,GAGvC,IAAIoC,EAAkBpC,EAAMqC,YAAYhC,QAAQiC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAY,KAAMA,EAAEhC,KAAM,GAAIgC,EAAEjC,QACrFkC,EAAmBxC,EAAMqC,YAAY7B,SAAS8B,KAAI,SAAAG,GAAC,OAAK,cAAC,EAAD,CAAS,QAASA,EAAEhC,SAAcgC,EAAEnC,O,sSCS7FoC,O,0VNmC2B,SAAChC,GAAD,MAAyB,CAACI,KAAMX,EAAcO,kB,85EO/DnEiC,GAAgB,EAAhBA,IAIT,GAAoC,EAAoB,EAAE,IAG7B,GAAgB,EAAoB,EAAI,wCAmBrE,GAAY,SAAe,GAAmF,IAA5E,IAAI,EAAW,KAAK,KAAK,EAAM,gBAAgB,EAAM,UAAc,EAAM,GAAW,EAAE,EAAE,GAAG,EAAW,IAAK,EAAM,KAAK,GAAI,OAAmB,OAAO,EAAkB,KAAzB,CAA4B,MAAM,CAAC,SAAS,CAAc,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,SAAS,EAAM,KAAI,SAAS,GAAG,OAAmB,OAAO,EAAiB,IAAxB,CAA2B,OAAO,CAAC,UAAU,EAAM,cAAc,EAAE,GAAqB,EAAE,aAAa,GAAG,QAAQ,SAAiB,GAAG,EAAM,cAAc,IAAK,SAAS,SAAsB,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,SAAS,EAAM,MAAM,KAAI,SAAS,GAAG,OAAmB,OAAO,EAAkB,KAAzB,CAA4B,MAAM,CAAC,SAAS,CAAc,OAAO,EAAkB,KAAzB,CAA4B,OAAO,CAAC,SAAS,CAAc,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,SAAsB,OAAO,EAAiB,IAAxB,CAA2B,EAAkC,EAAE,CAAC,GAAG,aAAa,EAAE,GAAG,SAAsB,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,IAAoB,MAAhB,EAAE,OAAO,MAAY,EAAE,OAAO,MAAM,GAAa,UAAU,GAAqB,EAAE,gBAA6B,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,SAAS,EAAE,SAAsB,OAAO,EAAiB,IAAxB,CAA2B,SAAS,CAAC,SAAS,EAAM,oBAAoB,MAAK,SAAS,GAAI,OAAO,IAAK,EAAE,MAAM,QAAQ,WAAmB,EAAM,SAAS,EAAE,KAAM,SAAS,aAA0B,OAAO,EAAiB,IAAxB,CAA2B,SAAS,CAAC,SAAS,EAAM,oBAAoB,MAAK,SAAS,GAAI,OAAO,IAAK,EAAE,MAAM,QAAQ,WAAmB,EAAM,OAAO,EAAE,KAAM,SAAS,gBAA6B,OAAO,EAAkB,KAAzB,CAA4B,OAAO,CAAC,SAAS,CAAc,OAAO,EAAkB,KAAzB,CAA4B,OAAO,CAAC,SAAS,CAAc,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,SAAS,EAAE,WAAwB,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,SAAS,EAAE,YAAyB,OAAO,EAAkB,KAAzB,CAA4B,OAAO,CAAC,SAAS,CAAc,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,SAAS,uBAAoC,OAAO,EAAiB,IAAxB,CAA2B,MAAM,CAAC,SAAS,4BAA4B,EAAE,a,uDCJ95DC,Y,oGAqEF,GAAc,SAAuB,GAAO,OAAO,EAAM,UAAU,OAK/D,GAAY,SAAqB,GAAO,OAAO,EAAM,UAAU,UAAe,GAAmB,SAA4B,GAAO,OAAO,EAAM,UAAU,iBAAsB,GAAe,SAAwB,GAAO,OAAO,EAAM,UAAU,aAAkB,GAAc,SAAuB,GAAO,OAAO,EAAM,UAAU,YAAiB,GAAuB,SAAgC,GAAO,OAAO,EAAM,UAAU,qBAOrb,GAA2C,SAAS,GAAkB,OAAO,EAA0B,EAAjC,CAAoC,EAAe,GAAkB,IAAI,EAAO,OAAO,EAA6B,EAApC,CAAuC,GAAgB,SAAS,IAAiB,IAAI,EAAM,OAAO,EAAgC,EAAvC,CAA0C,KAAK,GAAgB,IAAI,IAAI,EAAK,UAAU,OAAO,EAAK,IAAI,MAAM,GAAM,EAAK,EAAE,EAAK,EAAK,IAAQ,EAAK,GAAM,UAAU,GAA4J,OAArJ,EAAM,EAAO,KAAK,MAAM,EAAO,CAAC,MAAM,OAAO,KAAa,cAAc,SAAS,GAAY,EAAM,MAAM,SAAS,EAAW,EAAM,MAAM,WAAmB,EAAw/B,OAAj/B,OAAO,EAA6B,EAApC,CAAuC,EAAe,CAAC,CAAC,IAAI,oBAAoB,MAAM,WAA6B,KAAK,MAAM,SAAS,KAAK,MAAM,YAAY,KAAK,MAAM,YAAa,CAAC,IAAI,SAAS,MAAM,WAAkB,OAAmB,OAAO,EAAkB,KAAzB,CAA4B,EAAsB,SAAE,CAAC,SAAS,CAAC,KAAK,MAAM,WAAwB,OAAO,EAAiB,IAAxB,CAA2B,GAAoB,IAAI,KAAkB,OAAO,EAAiB,IAAxB,CAA2B,GAAY,CAAC,cAAc,KAAK,cAAc,SAAS,KAAK,MAAM,SAAS,YAAY,KAAK,MAAM,YAAY,MAAM,KAAK,MAAM,MAAM,WAAW,KAAK,MAAM,WAAW,gBAAgB,KAAK,MAAM,gBAAgB,oBAAoB,KAAK,MAAM,oBAAoB,OAAO,KAAK,MAAM,OAAO,SAAS,KAAK,MAAM,SAAS,SAAS,KAAK,MAAM,SAAS,eAAe,KAAK,MAAM,eAAe,mBAAmB,KAAK,MAAM,mBAAmB,iBAAiB,KAAK,MAAM,iBAAiB,wBAAwB,KAAK,MAAM,wBAAwB,SAAS,KAAK,MAAM,kBAA0B,EAAxgD,CAAyhD,EAAc,EAAE,WCvFhlD,I,MAKA,SAAK,EAAL,C,aDkF8nD,SAAyB,GAAO,MAAM,CAAC,MAAM,GAAc,GAAO,SAAS,GAAY,GAAO,gBAAgB,GAAmB,GAAO,YAAY,GAAe,GAAO,WAAW,GAAc,GAAO,oBAAoB,GAAuB,M,yNEzG52D,kCAA8B,IAAc,EAAkB,EAAW,G,4HDuBhF,C,KEnBFC,GAAuB,EACvBC,KAyCF,GAA0C,EAAoB,EAAE,IA0DhE,GAAgB,EAILC,I,umCC1FyB,G,gRCVlCC,KAAO,GAA2B,OAC9B,OAAN,EACK,EADC,CACD,OAAK,EAAY,EAAjB,CAAoBtD,GAApB,iBACI,yBAAS,gGACNM,KAAKS,GAFZ,cAGI,IAHJ,CAGI,SAAM,EAAN,CAAM,4BAAmBT,QAAQiD,OAAOA,IDiCjD,GAEI,EACI,I,WEzBR,GAAc,EAAoB,KAClC,GAAmC,EAAoB,EAAE,IAG7D,GAAc,SAAd,2WAEI,GAAJ,yVAEA,GAFA,iIAEA,wIAFA,wCAEA,6DCrBe,GACX,OACI,IADJ,E,sFACuBzD,SFOZwD,uC,KERX,CAC4BE,I,2vCCVhC,K,SCGaC,KACT,M,4fCPEC,sBACGC,CAACA,OAAO,KAAOA,MAAMA,KAAK,MAAM,KAAGC,QAAU,G,0OAClD,kCAAwBC,QAAmD,IAAjD,aAAiD,UAAzCC,GAAIC,GAAOC,EAAQC,UAAsB,OAAjBA,EAAGC,UAAc,QAAdA,EACzDJ,OAAOH,EAAOA,MACdI,KAAKJ,GACNK,OAAOL,OAAOA,EAETO,EAFEP,CAECA,OAAOA,EAKPD,EALAC,CAKAD,oCCRXhD,GAEEyD,SAAiB,GAAjBA,OAA4F,IAA5FA,CAA4F,SAAhDzD,WAAgD,EAAhDA,CAAgD,gBAKnFyD,OAFJjD,OAEIiD,IAFJjD,CAEIiD,U,qLALTA,C,wqDCIFC,GAAcC,mBACbC,EAD6B,EAAhBD,CAEZ1B,EAAIA,GAAO1B,IACbsD,EAAO,OAAQJ,EACJK,EADJ,CACIA,GACRC,SAAGC,IAIR,OAHEC,OAAMC,EACEC,EADRF,CACKE,KAPyB,GASzB,EAAO,MAAM,KAAK,WAA3B,OAAuC,OAAO,EAA9C,EAAuC,CAAvC,o7BATkBR,CASlB,e,IAAA,0G,gLCAI,GAA6B,GAAsP,GAAhO,WAA0B,IAAI,EAAM,UAAU,OAAO,QAAkB,IAAf,UAAU,GAAe,UAAU,GAAG,GAAkF,OAAO,GAE9OX,GAAiB,E,+GCrBwJ,GAA/J,OAAO,EAA2B,EAAlC,CAAqC,GAAY,OAAO,EAA+B,EAAtC,CAAyC,GAAgC,I,2KCC9H,G,4MCAA,G,wKCAA,G,yGCAA,G","file":"static/js/main.62fd6dff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__w7-vB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__3LncI\",\"item\":\"Post_item__1awDx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3SeaK\",\"item\":\"Navbar_item__1VkP1\",\"activeLink\":\"Navbar_activeLink__1NHh2\"};","import React from 'react';\r\nimport  s from'./Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n /*let s = {\r\n     'nav': 'Navbar_nav__3Rdw3',\r\n     'item': 'Navbar__item__2k32d'\r\n } */\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n        <div className={s.item}>\r\n         <NavLink to=\"/profile\" activeClassName={s.activeLink}> Profile</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n         <NavLink to=\"/dialogs\" activeClassName={s.activeLink} > Messages</NavLink>\r\n        </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink} > Users</NavLink>\r\n            </div>\r\n        <div  className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/news\" activeClassName={s.activeLink} > News</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/music\" activeClassName={s.activeLink} > Music</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/settings\" activeClassName={s.activeLink} > Settings</NavLink>\r\n        </div>\r\n      </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\rimport s from './News.module.css';\r\rtype NewsPropsType = {\r\r}\r\rconst News = (props: NewsPropsType) => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default News;","import React from 'react';\rimport s from './Music.module.css';\rconst Music = () => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default Music;","import React from 'react';\rimport s from './Settings.module.css';\r\rtype SettingsPropsType = {\r\r}\r\rconst Settings = (props: SettingsPropsType) => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default Settings;","//const UPDATE_NEW_MESSAGE_BODY = \"UPDATE_NEW_MESSAGE_BODY\";\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesPropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsStateType = {\r\n    dialogs: Array<DialogsPropsType>\r\n    messages:  Array<MessagesPropsType>\r\n    newMessageBody: string\r\n}\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Viktor\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Andrew\"},\r\n        {id: 5, name: \"Sasha\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your It-kamasutra? \"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\nexport type sendMessageAC = {\r\n    type: \"SEND_MESSAGE\"\r\n    newMessageBody: any\r\n}\r\nexport type updateMessageAC = {\r\n    type: \"UPDATE_NEW_MESSAGE_BODY\"\r\n    body: string\r\n}\r\n\r\nexport type actionsMessageType = sendMessageAC | updateMessageAC\r\nconst dialogsReducer = (state: DialogsStateType = initialState, action: actionsMessageType): DialogsStateType => {\r\n\r\n    switch (action.type) {\r\n        // case UPDATE_NEW_MESSAGE_BODY:\r\n        //     return {...state, newMessageBody: action.body}\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n               // newMessageBody: \"\",\r\n                messages: [...state.messages,\r\n                    {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody:any) => ({type: SEND_MESSAGE, newMessageBody} as const)\r\n/*\r\nexport const updateNewMessageBodyCreator = (body: string) =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: body} as const)\r\n*/\r\n\r\nexport default dialogsReducer;","import React from 'react';\rimport s from './../Dialogs.module.css';\rimport {NavLink} from \"react-router-dom\";\r\rtype DialogItemPropsType = {\r    id: number\r    name: string\r}\r\rconst DialogItem = (props: DialogItemPropsType) => {\r    let path = \"/dialogs/1\" + props.id;\r\r    return  <div className={s.dialog + ' ' + s.active}>\r        <NavLink to={path}>{props.name}</NavLink>\r    </div>\r}\r\r\rexport default DialogItem;","import React from 'react';\rimport s from './../Dialogs.module.css';\r\rtype MessagePropsType = {\r    message: string\r}\r\rconst Message = (props: MessagePropsType) => {\r    return <div className=\"message\">{props.message}</div>\r}\r\r\r\rexport default Message","import  React from \"react\"\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = ({meta: {touched,error}, children}) => {\r\n    const hasError = touched && error\r\n\r\n    return <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input,meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n  return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n","import React from \"react\"\r\n\r\nexport const required = (value: any) => {\r\n   if(value) return undefined ;\r\n   return \"Field is required!\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols` ;\r\n\r\n    return undefined;\r\n}","import React from 'react';\rimport s from './Dialogs.module.css';\rimport DialogItem from \"./DialogItem/DialogItem\";\rimport Message from \"./Message/Message\";\rimport {DialogPageType} from \"../../Redux/store\";\rimport {reduxForm, Field} from \"redux-form\";\rimport {Textarea} from \"../../assets/common/FormsControls/FormsControls\";\rimport {maxLengthCreator, required} from \"../../utilities/validators/Validators\";\r\r\rtype StatePropsType = {\r    dialogsPage: DialogPageType\r    sendMessage: (newMessageBody: any) => void\r    updateNewMessageBody: (text: string) => void\r    isAuth: boolean\r};\r\rconst Dialogs: React.FC<StatePropsType> = (props) => {\r\r    /*let state = props.dialogsPage;*/\r    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r    let messagesElements = props.dialogsPage.messages.map(m  => <Message message={m.message} key={m.id}/>);\r   // let newMessageBody = props.dialogsPage.newMessageBody;\r    /*let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r        let body = e.currentTarget.value;\r        props.updateNewMessageBody(body);\r    }*/\r    /*let onSendMessageClick = () => {\r        props.sendMessage();\r    }*/\r\r    const addNewMessage = (values: any) => {\r        props.sendMessage(values.newMessageBody);\r    }\r\r    return (\r        <div className={s.dialogs}>\r            <div className={s.dialogsItems}>\r                {dialogsElements}\r            </div>\r            <div className=\"messages\">\r                <div>{messagesElements}</div>\r            </div>\r            <AddMessageFormRedux onSubmit={addNewMessage}/>\r        </div>\r    )\r}\r\rconst maxLength50 = maxLengthCreator(50)\r\rexport const AddMessageForm = (props: any) => {\r    return (\r        <form onSubmit={props.handleSubmit}>\r            <div>\r                <Field component={Textarea}\r                       validate={[required,maxLength50]}\r                       name=\"newMessageBody\"\r                       placeholder=\"Enter your message\"/>\r                {/*<textarea*/}\r                {/*onChange={onNewMessageChange}*/}\r                {/*value={newMessageBody}*/}\r                {/*placeholder='Enter your message'>*/}\r                {/*</textarea>*/}\r            </div>\r            <div>\r               {/* <button onClick={onSendMessageClick}>Send</button>*/}\r                <button >Send</button>\r            </div>\r        </form>\r    )\r}\r\rconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\r\rexport default Dialogs;","import React from 'react';\rimport { DialogsStateType, sendMessageCreator} from \"../../Redux/dialogs-reducer\";\rimport Dialogs from \"./Dialogs\";\rimport {connect} from \"react-redux\";\rimport {RootStateRedux} from \"../../Redux/redux-store\";\rimport {compose, Dispatch} from \"redux\";\rimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\r\rtype MapStateToPropsType = {\r    dialogsPage: DialogsStateType\r    //isAuth: boolean\r}\r\rtype MapDispatchToPropsType = {\r    sendMessage: (newMessageBody: any) => void\r   // updateNewMessageBody: (body: string) => void\r}\r\rexport type sendMessageActionCreatorType = {\r    sendMessageCreator: (type: \"SEND_MESSAGE\") => void\r\r}\rexport type updateNewMessageBodyCreatorType = {\r    updateNewMessageBodyCreator: (type: \"UPDATE_NEW_MESSAGE_BODY\", body: string) => void\r}\r\r\rexport type DispatchPropsType = sendMessageActionCreatorType | updateNewMessageBodyCreatorType\r\r   let mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r    return {\r        dialogsPage: state.dialogsPage\r       // isAuth: state.auth.isAuth\r    }\r }\r   let mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r    return {\r        sendMessage: (newMessageBody:any) => {\r            dispatch(sendMessageCreator(newMessageBody));\r        },\r        /*updateNewMessageBody: (body: string) => {\r            dispatch(updateNewMessageBodyCreator(body));\r        }*/\r    }\r}\r\r/*\rlet AuthRedirectComponent = withAuthRedirect(Dialogs)\r\rconst DialogsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\r*/\r\rexport default compose<React.ComponentType>(connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs)","import {RootStateRedux} from \"./redux-store\";\r\n\r\nexport const getUsersState = (state: RootStateRedux) => {\r\n    return state.usersPage.users\r\n}\r\n/*export const getUsersSelector = (state: RootStateRedux) => {\r\n    return getUsersState(state).filter(u => true)\r\n}\r\nexport const getUsersSuperSelector = createSelector(getUsersState,getIsFetching,(users,isFetching) => {\r\n    return users.filter(u => true)\r\n})*/\r\nexport const getPageSize = (state: RootStateRedux) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: RootStateRedux) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: RootStateRedux) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: RootStateRedux) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: RootStateRedux) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n/*\r\nexport const getIsAuth = (state: RootStateRedux) => {\r\n    return state.usersPage.isAuth\r\n}*/\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setUsers, setTotalUsersCount, toggleIsFetching,\r\n    unfollowSuccess, toggleFollowingProgress, getUsers, unfollow,\r\n} from \"../Redux/users-reducer\";\r\nimport {RootStateRedux} from \"../Redux/redux-store\";\r\nimport {UserType} from \"../types\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../assets/common/Preloader\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersState\r\n} from \"../Redux/users-selectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component<MapDispatchToPropsType & MapStateToPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n\r\n            <Users\r\n                onPageChanged={this.onPageChanged}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                users={this.props.users}\r\n                isFetching={this.props.isFetching}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                followingInProgress={this.props.followingInProgress}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                setUsers={this.props.setUsers}\r\n                setCurrentPage={this.props.setCurrentPage}\r\n                setTotalUsersCount={this.props.setTotalUsersCount}\r\n                toggleIsFetching={this.props.toggleIsFetching}\r\n                toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                getUsers={this.props.getUsers}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nexport type MapStateToPropsType = {\r\n    users: UserType[],\r\n    currentPage: number\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n   // isAuth: boolean\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        users: getUsersState(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n       /* isAuth: getIsAuth(state)*/\r\n    }\r\n}\r\n\r\n/*let mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        currentPage: state.usersPage.currentPage,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}*/\r\n\r\n/* let mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n     return {\r\n         follow: (usersId: number) => {\r\n             dispatch(followAC(usersId))\r\n         },\r\n         unfollow: (usersId: number) => {\r\n             dispatch(unfollowAC(usersId))\r\n         },\r\n         setUsers: (users: Array<UserType>) => {\r\n             dispatch(setUsersAC(users))\r\n         },\r\n         setCurrentPage: (pageNumber: number) => {\r\n             dispatch(setCurrentPageAC(pageNumber))\r\n         },\r\n         setUsersTotalCount: (totalCount: number) => {\r\n             dispatch(setUsersTotalCountAC(totalCount))\r\n         },\r\n         toggleIsFetching: (isFetching: boolean) => {\r\n             dispatch(toggleIsFetchingAC(isFetching))\r\n         }\r\n     }\r\n }*/\r\n\r\nlet withRedirect = withAuthRedirect(UsersContainer)\r\n\r\n /*connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>\r\n(mapStateToProps, {follow, unfollow: unfollowSuccess, setCurrentPage, toggleFollowingProgress, getUsers, setUsers, setTotalUsersCount, toggleIsFetching})(withRedirect)*/\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n   // withAuthRedirect,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>\r\n    (mapStateToProps, {follow, unfollow: unfollowSuccess, setCurrentPage, toggleFollowingProgress, getUsers: getUsers, setUsers, setTotalUsersCount, toggleIsFetching})\r\n) (UsersContainer)","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../assets/common/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\n\r\n type ProfileInfoPropsType = {\r\n      profile: any\r\n      status: string\r\n      updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        {/*<div className={s.img}>\r\n        <img src='https://sun9-36.userapi.com/impg/HZnWrqzamma2_Yw7xcSD-8XXR_IZKSxjJp0WNQ/EYak3s-RlnY\r\n.jpg?size=1080x1079&quality=96&proxy=1&sign=8743d906f74b4baec37a9fb4f8481d8a&type=album' />\r\n        </div>*/}\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large}/>\r\n            <ProfileStatusWithHooks status={props.status}\r\n            updateStatus={props.updateStatus}/>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","export default __webpack_public_path__ + \"static/media/Spin-1.4s-137px (1).509019ba.svg\";","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\n//const UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST'\r\n\r\nexport type setUserProfile = {\r\n    type: 'SET_USER_PROFILE',\r\n    profile: any\r\n}\r\nexport type PostsPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileStateType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string,\r\n    profile: null,\r\n    status: string | null\r\n}\r\nlet initialState: ProfileStateType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It is my first post\", likesCount: 11},\r\n        {id: 3, message: \"Blabla\", likesCount: 11},\r\n        {id: 4, message: \"Dada\", likesCount: 11}\r\n    ],\r\n    newPostText: \"\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\nexport type ProfileActionsPropsType = ReturnType<typeof addPost> |\r\n   /* ReturnType<typeof updateNewPostText> |*/ ReturnType<typeof setStatus> | setUserProfile |\r\n    ReturnType<typeof deletePost>\r\n\r\n\r\nconst profileReducer = (state: ProfileStateType = initialState, action: ProfileActionsPropsType): ProfileStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = { id: 5, message: action.newPostText, likesCount: 0 };\r\n            return {...state, posts: [...state.posts, newPost]}\r\n        }\r\n       /* case UPDATE_NEW_POST_TEXT: {\r\n            return {...state, newPostText: action.newText}\r\n        }*/\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = (newPostText: string) => ({\r\n    type: ADD_POST, newPostText } as const)\r\n\r\nexport const setUserProfile = (profile: ProfileStateType) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile} as const)\r\n\r\nexport const setStatus = (status: string | null) => ({\r\n    type: SET_STATUS,\r\n    status} as const)\r\nexport const deletePost = (postId: number) => ({\r\n    type: DELETE_POST,\r\n    postId} as const)\r\n\r\nexport const getUserProfile = (userId: number) => (dispatch: any) => {\r\n      usersAPI.getProfile(userId)\r\n           .then(response => {\r\n           dispatch(setUserProfile(response.data))\r\n    })\r\n}\r\n\r\nexport const getStatus = (userId: number) => (dispatch: any) => {\r\n      profileAPI.getStatus(userId)\r\n           .then(response => {\r\n           dispatch(setStatus(response.data))\r\n    })\r\n}\r\n\r\nexport const updateStatus = (status:string) => (dispatch: any) => {\r\n    profileAPI.updateStatus(status)\r\n        .then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n}\r\n\r\n /*export const updateNewPostText = (text: string) => ({\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: text} as const)*/\r\n\r\n\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostsPropsType} from \"../../Redux/profile-reducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utilities/validators/Validators\";\r\nimport {Textarea} from \"../../assets/common/FormsControls/FormsControls\";\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string\r\n    addPost: (newPostText: any) => void\r\n    // onPostChange: (text: string) => void\r\n    // updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n    function AddNewPostForm(props: any) {\r\n        return <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field name=\"newPostText\" component={Textarea}\r\n                       placeholder={\"Post message\"}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n              {/*  <textarea onChange={props.onChange} value={props.value}/>*/}\r\n            </div>\r\n            <div>\r\n               {/* <button onClick={props.onClick}>Add post</button>*/}\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>;\r\n    }\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nconst MyPosts = React.memo((props:MyPostsPropsType) => {\r\n\r\n    let postsElements = props.posts.map((p, i) => <Post key={i} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n  /*  let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            props.updateNewPostText(e.currentTarget.value);\r\n    }*/\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3> My posts </h3>\r\n              {/*  <AddNewPostForm onChange={onPostChange} value={props.newPostText} onClick={onAddPost}/>*/}\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n})\r\n\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType ) => {\r\n    return (\r\n         <div className={s.item}>\r\n             <img src='https://sun9-35.userapi.com/impf/HLP5CRTKbRvZisagdIWhrAzNRGxoFve9ZFJwLQ/ezCvng_UZZM.jpg?size=864x1080&quality=96&sign=439b5cff05a0cf4601e2b7c9f7625386&type=album' />\r\n             {props.message}\r\n             <div> <span>like</span> {props.likesCount}\r\n              </div>\r\n          </div>\r\n          \r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {addPost, PostsPropsType} from \"../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../Redux/redux-store\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string\r\n}\r\nexport type MapDispatchToPropsType = {\r\n //   updateNewPostText: (text: string) => void\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n// const mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n//     return {\r\n//         updateNewPostText: (text: string) => {\r\n//             let action = updateNewPostTextActionCreator(text);\r\n//             dispatch(action)\r\n//         },\r\n//         addPost: () => {\r\n//             dispatch(addPostActionCreator());\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>\r\n(mapStateToProps, {addPost})(MyPosts) /*as ConnectedComponent<any, {}>*/","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type HeaderPropsType = {\r\n  //  setAuthUserData: (id: number, email: string, login: string, isAuth: boolean) => void\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='https://sun9-44.userapi.com/impf/c856136/v856136281/a9770/7RBeaUJ9A98.jpg?size=767x767&quality=96&proxy=1&sign=265e2a0e0a64547c891841d58ef10c51&type=album'/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                              ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n                              : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>);\r\n}\r\nexport default Header;","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nexport type InitialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action: SetUserDataActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport type SetUserDataActionType = ReturnType<typeof setAuthUserData>\r\n\r\nexport const setAuthUserData = (usersId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({type: SET_USER_DATA, payload:{usersId, email,login, isAuth} } as const)\r\n\r\n export const getAuthUserData = () => (dispatch: any) => {\r\n    authAPI.me().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n        })\r\n}\r\n\r\nexport const login = (email:string, password:string,rememberMe:boolean) => (dispatch: any) => {\r\n\r\n    authAPI.login(email,password,rememberMe)\r\n        .then(response => {\r\n         if(response.data.resultCode === 0){\r\n             dispatch(getAuthUserData())\r\n         } else {\r\n            let message = response.data.messages.length > 0\r\n                                    ? response.data.messages[0]\r\n                                    : \"some error\"\r\n             dispatch(stopSubmit(\"login\", {_error: message}))\r\n         }\r\n    })\r\n}\r\n\r\nexport const logout = () => (dispatch: any) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if(response.data.resultCode === 0){\r\n                dispatch(setAuthUserData(null,null,null,false))\r\n            }\r\n        })\r\n}\r\n\r\nexport default authReducer;","import {Field} from \"redux-form\";\r\nimport {required} from \"../utilities/validators/Validators\";\r\nimport {Input} from \"../assets/common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\nimport s from \"../assets/common/FormsControls/FormsControls.module.css\"\r\n\r\nexport const LoginForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={\"Email\"}\r\n                    validate={[required]}\r\n                    name={\"email\"}\r\n                    component={Input}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={\"Password\"}\r\n                    type={\"password\"}\r\n                    validate={[required]}\r\n                    name={\"password\"}\r\n                    component={Input}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    type=\"checkbox\"\r\n                    name={\"rememberMe\"}\r\n                    component={Input}\r\n                /> Remember me\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nexport type SidebarStateType = {\r\n\r\n}\r\nlet initialState: SidebarStateType = {}\r\n\r\nconst sidebarReducer = (state: SidebarStateType = initialState, action: any): SidebarStateType => {\r\n\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage:  profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n// export type DispatchPropsType1 = typeof store.dispatch\r\nexport type RootStateRedux = ReturnType<typeof rootReducer>\r\nlet store: Store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./Redux/redux-store\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {initializeApp} from \"./Redux/app-reducer\";\n\nReactDOM.render( <BrowserRouter>\n    <Provider store={store}>\n        <App initializeApp={initializeApp} initialized={false}/>\n    </Provider>\n</BrowserRouter>, document.getElementById('root'));\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__XUIay\",\"dialogsItems\":\"Dialogs_dialogsItems__3HR55\",\"active\":\"Dialogs_active__ICjGL\",\"messages\":\"Dialogs_messages__36TXD\",\"message\":\"Dialogs_message__2DeW4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__Ceuz6\",\"error\":\"FormsControls_error__2gDaN\",\"formSummaryError\":\"FormsControls_formSummaryError__r1pzm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__XybWM\",\"selectedPage\":\"Users_selectedPage__2bVJj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__yxqJL\",\"posts\":\"MyPosts_posts__2cETP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3fFoF\",\"loginBlock\":\"Header_loginBlock__1Wask\"};"],"sourceRoot":""}