{"version":3,"sources":["components/Profile/MyPosts/ProfileInfo/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPostsContainer/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","assets/images/390poHMbqew.jpg","components/Profile/MyPosts/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/MyPosts/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer/AddNewPost/AddNewPostForm.tsx","components/Profile/MyPosts/MyPostsContainer/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","className","s","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","target","files","length","initialValues","formData","then","Post","item","message","likesCount","required","MyPosts","postsElements","posts","p","i","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","connect","state","profilePage","actions","Profile","MyPostsContainer","ProfileContainer","userId","Number","this","match","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.52b89e3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__V_OuX\",\"mainPhoto\":\"ProfileInfo_mainPhoto__31ZaA\",\"contact\":\"ProfileInfo_contact__Fo6zD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__wvoJE\",\"posts\":\"MyPosts_posts__1DUBN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__1ujvQ\",\"item\":\"Post_item__1GP0A\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropstype = {\r\n    status: string | null\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropstype> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        if (status) props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode}\r\n                       value={status ? status : ''}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/390poHMbqew.5605775c.jpg\";","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../../../../assets/common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../../../types\";\r\nimport s from \"../ProfileInfo/ProfileInfo.module.css\"\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n//type ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({\r\n                                                                                              profile,\r\n                                                                                              handleSubmit,\r\n                                                                                              error\r\n                                                                                          }) => {\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n        </div>\r\n        {error && <div className={s.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <b>FullName</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map((key) => {\r\n                    return <div key={key} className={s.contact}>\r\n                        <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                    </div>\r\n                })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React from \"react\";\r\nimport {Contact} from \"../ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../../../../types\";\r\n\r\nexport type ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>FullName</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map((key) => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as any]}/>\r\n                })}\r\n        </div>\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../../../assets/common/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport {ProfileType} from \"../../../../../types\";\r\nimport userPhoto from \"../../../../../assets/images/390poHMbqew.jpg\";\r\nimport ProfileDataForm from \"../ProfileData/ProfileDataForm\";\r\nimport {ProfileData} from \"../ProfileData/ProfileData\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string | null\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <img src={profile.photos.large || userPhoto} alt={\"try again later\"} className={s.mainPhoto}/>\r\n            {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n            {editMode\r\n                ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                : <ProfileData goToEditMode={() => {\r\n                    setEditMode(true)\r\n                }} profile={profile} isOwner={isOwner}/>}\r\n\r\n            <ProfileStatusWithHooks status={status}\r\n                                    updateStatus={updateStatus}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport type ContactPropsType = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://sun9-35.userapi.com/impf/HLP5CRTKbRvZisagdIWhrAzNRGxoFve9ZFJwLQ/ezCvng_UZZM.jpg?size=864x1080&quality=96&sign=439b5cff05a0cf4601e2b7c9f7625386&type=album'/>\r\n            {props.message}\r\n            <div><span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import {createField, GetStringKeys, Textarea} from \"../../../../../assets/common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../../../../utilities/validators/Validators\";\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\ntype PropsType = {}\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            {createField<AddPostFormValuesTypeKeys>(\"Post message\", \"newPostText\", [required], Textarea)}\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\nexport default reduxForm<AddPostFormValuesType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from '../Post/Post';\r\nimport {PostsPropsType} from '../../../../types';\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"./AddNewPost/AddNewPostForm\";\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostsPropsType>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<MapStateToPropsType & MapDispatchToPropsType> = props => {\r\n\r\n    let postsElements = props.posts.map((p, i) => <Post key={i} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3> My posts </h3>\r\n            <AddNewPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../../../redux/redux-store\";\r\nimport {PostsPropsType} from \"../../../../types\";\r\nimport {actions} from \"../../../../redux/profile/profile-reducer\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n})\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>\r\n(mapStateToProps, {addPost: actions.addPost})(MyPosts) /*as ConnectedComponent<any, {}>*/","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    updateStatus: (status: string) => void\r\n    status: string | null\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile/profile-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string | null\r\n    isAuth: boolean\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    updateStatus: (status: string) => void\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType & RouteComponentProps<{ userId: string }>> {\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = Number(this.props.authorizedUserId);\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType & RouteComponentProps<{ userId?: string }>>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile  {...this.props}\r\n                      saveProfile={this.props.saveProfile}\r\n                      isOwner={!this.props.match.params.userId}\r\n                      profile={this.props.profile}\r\n                      updateStatus={this.props.updateStatus}\r\n                      status={this.props.status}\r\n                      savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = ({profilePage, auth}: RootStateRedux): MapStateToPropsType => ({\r\n    profile: profilePage.profile,\r\n    status: profilePage.status,\r\n    authorizedUserId: auth.userId,\r\n    isAuth: auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}