{"version":3,"sources":["pages/Chat/ChatPage.module.css","pages/Chat/ChatPage.tsx"],"names":["module","exports","Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","event","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","src","photo","width","userName","setMessage","value","onChange","e","className","s","btn","onClick","sendMessage","disabled","ChatPage"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,IAAM,wB,oRCeXC,EAAiB,WAE1B,IAAMC,EAASC,aAA4B,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UACzDI,EAAWC,cASjB,OAPAC,qBAAU,WAEN,OADAF,EAASG,eACF,WACHH,EAASI,kBAEd,IAEI,gCACS,UAAXR,GAAsB,iFACvB,qCACI,cAACS,EAAD,IACA,cAACC,EAAD,WAKCD,EAAqB,WAE9B,IAAME,EAAWV,aAA+C,SAAAC,GAAK,OAAIA,EAAMC,KAAKQ,YAC9EC,EAAoBC,iBAAuB,MAHb,EAIIC,oBAAkB,GAJtB,mBAI7BC,EAJ6B,KAIfC,EAJe,KAOpCV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAWJ,OAAO,sBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SATnC,SAACC,GACnB,IAAMC,EAAUD,EAAME,cAClBC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAIjC,UACFL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAASC,QAASH,GAAQA,EAAEI,OACxD,qBAAKC,IAAK1B,QAILuB,EAAkDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAExE,OAAO,gCACH,qBAAKK,IAAKL,EAAQM,MAAOtB,MAAO,CAACuB,MAAO,UAAU,4BAAIP,EAAQQ,WAC9D,uBACCR,EAAQA,QACT,6BAIK1B,EAA2B,WAAO,IAAD,EACZI,mBAAS,IADG,mBACnCsB,EADmC,KAC1BS,EAD0B,KAEpC7C,EAASC,aAAwC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UACrEI,EAAWC,cAWjB,OAAO,gCACH,8BACI,0BAAUyC,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAOH,EAAWG,EAAEtB,cAAcoB,YAE1D,8BACI,wBACIG,UAAWC,IAAEC,IAAKC,QAhBH,WAClBhB,IAGLhC,EAASiD,YAAYjB,IACrBS,EAAW,MAW4CS,SAAqB,UAAXtD,EAD7D,wBASGuD,UAhGE,WACb,OACI,8BACI,cAACxD,EAAD","file":"static/js/6.63932a7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ChatPage_btn__h227e\"};","import {Button} from \"antd\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ChatMessageType, sendMessage, startMessagesListening, StatusType, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport s from \"./ChatPage.module.css\";\r\n\r\n\r\nconst ChatPage = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Chat: React.FC = () => {\r\n\r\n    const status = useSelector<RootStateRedux>(state => state.chat.status)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        };\r\n    }, []);\r\n\r\n    return <div>\r\n        {status === 'error' && <div>alert(\"error occured.Please refresh the page\")</div>}\r\n        <>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </>\r\n    </div>;\r\n};\r\n\r\nexport const Messages: React.FC = () => {\r\n\r\n    const messages = useSelector<RootStateRedux, ChatMessageType[]>(state => state.chat.messages);\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(true)\r\n\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n        }\r\n    }, [messages])\r\n\r\n    const scrollHandler = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = event.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    return <div style={{height: \"400px\", overflowY: \"auto\"}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message message={m} key={m.id}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>;\r\n};\r\n\r\nexport const Message: React.FC<{ message: ChatMessageType }> = React.memo(({message}) => {\r\n\r\n    return <div>\r\n        <img src={message.photo} style={{width: \"30px\"}}/><b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>;\r\n})\r\n\r\nexport const AddMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState(\"\");\r\n    const status = useSelector<RootStateRedux, StatusType>(state => state.chat.status);\r\n    const dispatch = useDispatch();\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessage(message));\r\n        setMessage(\"\");\r\n    };\r\n\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea value={message}\r\n                      onChange={(e) => setMessage(e.currentTarget.value)}></textarea>\r\n        </div>\r\n        <div>\r\n            <button\r\n                className={s.btn} onClick={sendMessageHandler} disabled={status !== \"ready\"}>\r\n                Send\r\n            </button>\r\n        </div>\r\n    </div>;\r\n};\r\n\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}