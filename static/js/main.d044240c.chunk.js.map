{"version":3,"sources":["api/profile-api.ts","redux/profile/profile-reducer.ts","api/api.ts","redux/dialogs-reducer.ts","components/Users/Users.module.css","components/Navbar/Navbar.module.css","assets/common/FormsControls/FormsControls.tsx","reportWebVitals.js","components/Navbar/Navbar.tsx","components/Profile/News/News.tsx","components/Profile/Music/Music.tsx","components/Profile/Settings/Settings.tsx","assets/common/Paginator/Paginator.tsx","assets/images/114-1149878_setting-user-avatar-in-specific-size-without-breaking.png","components/Users/User.tsx","utilities/object-helpers.ts","api/users-api.ts","redux/users/users-reducer.ts","redux/users/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Login/LoginForm.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx","assets/common/FormsControls/FormsControls.module.css","utilities/validators/Validators.tsx","assets/images/Spin-1.4s-137px (1).svg","assets/common/Preloader.tsx","assets/common/Paginator/Paginator.module.css","components/Header/Header.module.css"],"names":["profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","newPostText","actions","addPost","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","ResultCodeEnum","ResultCodeForCaptcha","axios","create","withCredentials","baseURL","dialogs","name","newMessageBody","sendMessageCreator","dialogsReducer","body","module","exports","FormControl","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","nav","item","to","activeClassName","activeLink","active","News","Music","Settings","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","map","selectedPage","pageNumber","e","User","user","followingInProgress","unfollow","follow","src","small","userPhoto","followed","disabled","some","fullName","updateObjectInArray","itemId","objPropName","newObjProps","u","usersAPI","getUsers","term","friend","post","delete","users","totalUsersCount","isFetching","payload","count","items","totalCount","getUsersState","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","UsersPage","Preloader","Header","header","loginBlock","isAuth","login","logout","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","getAuthUserData","response","Success","getCaptchaUrl","url","authReducer","HeaderContainer","this","Component","connect","LoginReduxForm","reduxForm","form","handleSubmit","required","alt","formSummaryError","Login","CaptchaIsRequired","length","initialized","globalError","initializedSuccess","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersId","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","withSuspense","WrappedComponent","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","AppContainer","compose","withRouter","initializeApp","promise","all","catchAllUnhandledErrors","alert","addEventListener","removeEventListener","exact","path","render","SamuraiJSApp","ReactDOM","document","getElementById","maxLengthCreator","maxLength","style","backgroundColor","preloader"],"mappings":"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","file":"static/js/main.d044240c.chunk.js","sourcesContent":["import {instance, APIResponseType} from \"./api\";\r\nimport {PhotosType, ProfileType} from \"../types\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        let formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}","import {PhotosType, PostsPropsType, ProfileType} from \"../../types\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {profileAPI} from \"../../api/profile-api\";\r\nimport {BaseThunkType, InferActionsType} from \"../redux-store\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It is my first post\", likesCount: 11},\r\n        {id: 3, message: \"Blabla\", likesCount: 11},\r\n        {id: 4, message: \"Dada\", likesCount: 11}\r\n    ] as Array<PostsPropsType>,\r\n    newPostText: \"\",\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD_POST': {\r\n            let newPost = {id: 5, message: action.newPostText, likesCount: 0};\r\n            return {...state, posts: [...state.posts, newPost], newPostText: ''}\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'SN/PROFILE/DELETE_POST': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        case 'SN/PROFILE/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\n\r\n// THUNK CREATORS\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile);\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = InferActionsType<typeof actions>\r\nexport type InitialStateType = typeof initialState\r\nexport type ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\nexport default profileReducer;","import axios from \"axios\";\r\nimport {UserType} from \"../types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"bcdf24e0-2cad-40e4-be67-f9d4eea9b547\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: string[]\r\n    resultCode: RC\r\n}","import {InferActionsType} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Viktor\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Andrew\"},\r\n        {id: 5, name: \"Sasha\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your It-kamasutra? \"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND_MESSAGE\":\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    sendMessageCreator: (newMessageBody: string) => ({type: \"SN/DIALOGS/SEND_MESSAGE\", newMessageBody} as const)\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = InferActionsType<typeof actions>\r\nexport type InitialStateType = typeof initialState\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1nMrh\",\"selectedPage\":\"Users_selectedPage__35YmP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2HG0W\",\"item\":\"Navbar_item__1wlkt\",\"activeLink\":\"Navbar_activeLink__1ES7X\"};","import React from \"react\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {FieldValidatorType} from \"../../../utilities/validators/Validators\";\r\n\r\ntype FormsControlsPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlsPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n\r\n    return <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | null,\r\n                                                         name: string,\r\n                                                         validators: FieldValidatorType[],\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         //component: (value: string) => (string | undefined),\r\n                                                         props = {},\r\n                                                         text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n/*let s = {\r\n    'nav': 'Navbar_nav__3Rdw3',\r\n    'item': 'Navbar__item__2k32d'\r\n} */\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}> Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}> Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}> Users</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}> News</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}> Music</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}> Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\rimport s from './News.module.css';\r\rtype NewsPropsType = {\r\r}\r\rconst News = (props: NewsPropsType) => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default News;","import React from 'react';\rimport s from './Music.module.css';\rconst Music = () => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default Music;","import React from 'react';\rimport s from './Settings.module.css';\r\rtype SettingsPropsType = {\r\r}\r\rconst Settings = (props: SettingsPropsType) => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default Settings;","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport let Paginator: React.FC<PropsType> = ({\r\n                                                 totalItemsCount,\r\n                                                 pageSize,\r\n                                                 currentPage = 1,\r\n                                                 onPageChanged = x => x,\r\n                                                 portionSize = 10\r\n                                             }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return <div className={cn(styles.paginator)}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}\r\n                >{p}</span>\r\n            })}\r\n\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>\r\n        }\r\n\r\n\r\n    </div>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/114-1149878_setting-user-avatar-in-specific-size-without-breaking.e582e4ba.png\";","import React from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/114-1149878_setting-user-avatar-in-specific-size-without-breaking.png\";\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {UserType} from \"../../types\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nexport let User: React.FC<UserPropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return <div>\r\n        <span>\r\n             <div>\r\n                <NavLink to={'./profile/' + user.id}>\r\n                     <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                </NavLink>\r\n            </div>\r\n             <div>{user.followed\r\n                 ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                           onClick={() => {\r\n                               unfollow(user.id)\r\n                           }}>Unfollow</button>\r\n                 : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                           onClick={() => {\r\n                               follow(user.id)\r\n                           }}>Follow</button>}\r\n            </div>\r\n        </span>\r\n        <span>\r\n                <span>\r\n                    <div>{user.fullName}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    {/*<div>{\"user.location.country\"}</div>*/}\r\n                    {/*<div>{\"user.location.city\"}</div>*/}\r\n                </span>\r\n         </span>\r\n    </div>\r\n}\r\n","type MakeKeysOptional<T extends {}> = {[Property in keyof T]?: T[Property]}\r\n\r\nexport const updateObjectInArray = <T extends {}>(item: T[], itemId: T[keyof T], objPropName: keyof T, newObjProps: MakeKeysOptional<T>): T[] => {\r\n    return item.map((u) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 10,term: string = \"\",friend: null | boolean = null) => {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n    // getProfile(userId: number) {\r\n    //     console.warn('Obsolete method.Please profileAPI object.')\r\n    //     return profileAPI.getProfile(userId)\r\n    // }\r\n}\r\n","import {UserType} from \"../../types\";\r\nimport {updateObjectInArray} from \"../../utilities/object-helpers\";\r\nimport {BaseThunkType, InferActionsType} from \"../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../api/users-api\";\r\nimport {APIResponseType} from \"../../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.usersId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.usersId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case  'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case  'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"SN/USERS/SET_FILTER\": {\r\n            return {\r\n                ...state,filter: action.payload\r\n            }\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    followSuccess: (usersId: number) => ({type: 'SN/USERS/FOLLOW', usersId} as const),\r\n    unfollowSuccess: (usersId: number) => ({type: 'SN/USERS/UNFOLLOW', usersId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER',payload: filter } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => (\r\n        {type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => (\r\n        {type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const)\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const getUsers = (currentPage: number, pageSize: number,filter: FilterType): ThunkType => {  //ThunkCreator\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(currentPage, pageSize,filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                          userId: number,\r\n                                          apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                          actionCreator: (userId: number) => ActionsType) => {\r\n    try {\r\n        dispatch(actions.toggleFollowingProgress(true, userId))\r\n        let data = await apiMethod(userId);\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actionCreator(userId))\r\n        }\r\n    } finally {\r\n        dispatch(actions.toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {  //ThunkCreator\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {  //ThunkCreator\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = InferActionsType<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;","import {RootStateRedux} from \"../redux-store\";\r\n\r\nexport const getUsersState = (state: RootStateRedux) => {\r\n    return state.usersPage.users\r\n}\r\n/*export const getUsersSelector = (state: RootStateRedux) => {\r\n    return getUsersState(state).filter(u => true)\r\n}\r\nexport const getUsersSuperSelector = createSelector(getUsersState,getIsFetching,(users,isFetching) => {\r\n    return users.filter(u => true)\r\n})*/\r\nexport const getPageSize = (state: RootStateRedux) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: RootStateRedux) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: RootStateRedux) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: RootStateRedux) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: RootStateRedux) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: RootStateRedux) => {\r\n    return state.usersPage.filter\r\n}\r\n/*\r\nexport const getIsAuth = (state: RootStateRedux) => {\r\n    return state.usersPage.isAuth\r\n}*/\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users/users-selectors\";\r\n\r\n\r\nexport const usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\nexport type FormType = {\r\n   term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\nexport type PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm:React.FC<PropsType> = React.memo( props => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (setSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term,friend: String(filter.friend) as FriendFormType  }}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value={\"null\"}>All</option>\r\n                        <option value={\"true\"}>only followed</option>\r\n                        <option value={\"false\"}>only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","import React, {useEffect} from \"react\";\r\nimport {Paginator} from \"../../assets/common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\nimport {FilterType, getUsers} from \"../../redux/users/users-reducer\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersFilter,\r\n    getUsersState\r\n} from \"../../redux/users/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const users = useSelector(getUsersState)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if(!!parsed.term) actualFilter = {...actualFilter,term: parsed.term as string}\r\n        switch(parsed.friend){\r\n            case \"null\":\r\n                actualFilter = {...actualFilter,friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter,friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter,friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n\r\n        const query: QueryParamsType = {}\r\n\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n\r\n        history.push({\r\n            pathname: \"/users\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    },[filter,currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsers(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n        <Paginator totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize}\r\n                   currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}\r\n        />\r\n        <div>\r\n            {users.map(u => <User key={u.id}\r\n                                  user={u}\r\n                                  unfollow={unfollow}\r\n                                  follow={follow}\r\n                                  followingInProgress={followingInProgress}/>)}\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../../assets/common/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users/users-selectors\";\r\n\r\n\r\ntype UsersPagePropsType = {}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        {isFetching ? <Preloader/> : null}\r\n\r\n        <Users/>\r\n    </>\r\n}","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            {/*<img src='https://p7.hiclipart.com/preview/799/906/393/web-development-angularjs-react-front-and-back-ends-satelite-thumbnail.jpg'/>*/}\r\n            <img\r\n                src='https://p1.hiclipart.com/preview/570/557/170/react-logo-redux-javascript-vuejs-babel-nodejs-npm-web-application-png-clipart.jpg'/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>);\r\n}\r\nexport default Header;","import {instance, APIResponseType, ResultCodeEnum, ResultCodeForCaptcha} from \"./api\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}","import {ResultCodeEnum, ResultCodeForCaptcha} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n        {type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\r\n        {type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const),\r\n\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n\r\n    if (response.data.resultCode === ResultCodeEnum.Success) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0\r\n            ? data.messages[0]\r\n            : \"some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\ntype OwnPropsType = {\r\n    logout: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<OwnPropsType & MapStateToPropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}\r\n                logout={this.props.logout}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from 'react'\r\nimport {reduxForm} from \"redux-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginForm, PropsType} from \"./LoginForm\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, PropsType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginToPropsType = {}\r\n\r\nexport type LoginFormValuesType = {\r\n    password: string\r\n    email: string\r\n    rememberMe: boolean\r\n    captchaUrl: string\r\n}\r\nexport const Login: React.FC<LoginToPropsType> = () => {\r\n\r\n    const captchaUrl = useSelector((state: RootStateRedux) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: RootStateRedux) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captchaUrl))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n\r\n\r\n","import {required} from \"../../utilities/validators/Validators\";\r\nimport {createField, Input, GetStringKeys} from \"../../assets/common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\nimport s from \"../../assets/common/FormsControls/FormsControls.module.css\"\r\nimport {InjectedFormProps} from \"redux-form\";\r\nimport {LoginFormValuesType} from \"./Login\";\r\n\r\nexport type PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = ({\r\n                                                                                                       handleSubmit,\r\n                                                                                                       error,\r\n                                                                                                       captchaUrl\r\n                                                                                                   }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt={'not found'}/>}\r\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport type LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    globalError: null\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK CREATOR\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess())\r\n        })\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\n// TYPES\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\n// type ThunkType = BaseThunkType<ActionsType>\r\nexport default appReducer;","\r\n type SidebarStateType = typeof initialState\r\n let initialState = {}\r\n\r\nconst sidebarReducer = (state = initialState, action: any): SidebarStateType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport profileReducer from \"./profile/profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport {usersReducer} from \"./users/users-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type RootStateRedux = ReturnType<typeof rootReducer>\r\nlet store: Store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// type PropertiesTypes<T> = T extends { [key: string] : infer U } ? U : never\r\n// export type InferActionsType<T extends { [key: string] : (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type InferActionsType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, RootStateRedux, unknown, A>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from \"react\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>)  {\r\n\r\n     return (props: WCP) => {\r\n         return <React.Suspense fallback={<div>loading...</div>}>\r\n             <WrappedComponent {...props}/>\r\n         </React.Suspense>\r\n     }\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport News from \"./components/Profile/News/News\";\nimport Music from \"./components/Profile/Music/Music\";\nimport Settings from './components/Profile/Settings/Settings';\nimport {BrowserRouter, Redirect, Route} from \"react-router-dom\";\nimport {UsersPage} from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport store, {RootStateRedux} from \"./redux/redux-store\";\nimport {Preloader} from \"./assets/common/Preloader\";\nimport {compose} from \"redux\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Profile/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\n\n\ntype MapStateToPropsType = {\n    initialized: boolean\n}\ntype MapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\nconst App: React.FC<PropsType> = ({initialized, initializeApp}) => {\n    let catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occured')\n    }\n\n    useEffect(() => {\n        initializeApp();\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        window.removeEventListener('unhandledrejection', catchAllUnhandledErrors)\n    }, [])\n    if (!initialized) {\n        return <Preloader/>\n    }\n    return (\n        <div className='app-wrapper'>\n            <HeaderContainer/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Route exact path=\"/\"\n                       render={() => <Redirect to={\"/profile\"}/>}/>\n                <Route path='/dialogs'\n                       render={() => <SuspendedDialogs/>}/>\n                <Route path='/profile/:userId?'\n                       render={() => <SuspendedProfile/>}/>\n                <Route path='/users'\n                       render={() => <UsersPage/>}/>\n                <Route path='/login' render={() => <Login/>}/>\n                <Route path='/dialogs' render={() => <News/>}/>\n                <Route path='/profile' render={() => <Music/>}/>\n                <Route path='/dialogs' render={() => <Settings/>}/>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({\n    initialized: state.app.initialized\n})\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst SamuraiJSApp = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default SamuraiJSApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(<SamuraiJSApp/>\n    , document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__Ceuz6\",\"error\":\"FormsControls_error__2gDaN\",\"formSummaryError\":\"FormsControls_formSummaryError__r1pzm\"};","import React from \"react\"\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n   if(value) return undefined ;\r\n   return \"Field is required!\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType  => (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols` ;\r\n\r\n    return undefined;\r\n}","export default __webpack_public_path__ + \"static/media/Spin-1.4s-137px (1).509019ba.svg\";","import preloader from \"../images/Spin-1.4s-137px (1).svg\";\r\nimport React from \"react\";\r\n\r\n\r\nexport let Preloader = (props: any) => {\r\n    return <div style={{backgroundColor: ''}}>\r\n        <img src={preloader}/>\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__245Xh\",\"pageNumber\":\"Paginator_pageNumber__2DhQX\",\"selectedPage\":\"Paginator_selectedPage__2JAKO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3WY8I\",\"loginBlock\":\"Header_loginBlock__1ARoA\"};"],"sourceRoot":""}