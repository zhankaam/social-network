{"version":3,"sources":["Profile/Dialogs/Dialogs.module.css","Users/Users.module.css","Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Profile/MyPosts/MyPosts.module.css","Header/Header.module.css","Profile/MyPosts/Post/Post.module.css","Navbar/Navbar.module.css","Navbar/Navbar.tsx","Profile/News/News.tsx","Profile/Music/Music.tsx","Profile/Settings/Settings.tsx","Redux/dialogs-reducer.ts","Profile/Dialogs/DialogItem/DialogItem.tsx","Profile/Dialogs/Message/Message.tsx","Profile/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","Profile/Dialogs/DialogsContainer.tsx","api/api.ts","Redux/users-reducer.ts","assets/images/390poHMbqew.jpg","Users/Users.tsx","assets/images/Spin-1.4s-137px (1).svg","assets/common/Preloader.tsx","Users/UsersContainer.tsx","Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","Redux/profile-reducer.ts","Profile/MyPosts/Post/Post.tsx","Profile/MyPosts/MyPosts.tsx","Profile/MyPosts/MyPostsContainer.tsx","Profile/Profile.tsx","Profile/ProfileContainer.tsx","Header/Header.tsx","Redux/auth-reducer.ts","Header/HeaderContainer.tsx","Login/Login.tsx","App.tsx","reportWebVitals.js","Redux/sidebar-reducer.ts","Redux/redux-store.ts","index.tsx"],"names":["module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","News","props","Music","Settings","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","initialState","dialogs","id","name","messages","message","newMessageBody","dialogsReducer","state","action","type","body","DialogItem","path","dialog","Message","Dialogs","dialogsElements","dialogsPage","map","d","messagesElements","m","isAuth","dialogsItems","e","currentTarget","value","updateNewMessageBody","sendMessage","mapStateToPropsWithRedirect","auth","withAuthRedirect","Component","connect","restProps","AuthRedirectComponent","DialogsContainer","dispatch","updateNewMessageBodyCreator","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","authAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","users","totalUsersCount","isFetching","followingInProgress","unfollowSuccess","usersId","setUsers","setTotalUsersCount","count","toggleIsFetching","toggleFollowingProgress","usersReducer","u","followed","filter","Users","pagesCount","Math","ceil","pages","i","push","p","styles","selectedPage","onClick","onPageChanged","src","photos","small","userPhoto","disabled","some","unfollow","follow","fullName","status","Preloader","style","backgroundColor","preloader","withRedirect","pageNumber","getUsers","this","setCurrentPage","React","usersPage","resultCode","items","totalCount","ProfileInfo","profile","img","descriptionBlock","large","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","posts","likesCount","newPostText","profileReducer","newPost","newText","Post","MyPosts","postsElements","postsBlock","onChange","updateNewPostText","addPost","profilePage","text","Profile","MyPostsContainer","match","params","Number","undefined","getUserProfile","WithUrlDataContainerComponent","withRouter","Header","header","loginBlock","login","SET_USER_DATA","email","authReducer","HeaderContainer","getAuthUserData","setAuthUserData","Login","App","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","sidebarReducer","rootReducer","combineReducers","sidebar","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.42fffccb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__XUIay\",\"dialogsItems\":\"Dialogs_dialogsItems__3HR55\",\"active\":\"Dialogs_active__ICjGL\",\"messages\":\"Dialogs_messages__36TXD\",\"message\":\"Dialogs_message__2DeW4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__XybWM\",\"selectedPage\":\"Users_selectedPage__2bVJj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__w7-vB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__yxqJL\",\"posts\":\"MyPosts_posts__2cETP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3fFoF\",\"loginBlock\":\"Header_loginBlock__1Wask\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Post_content__3LncI\",\"item\":\"Post_item__1awDx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3SeaK\",\"item\":\"Navbar_item__1VkP1\",\"activeLink\":\"Navbar_activeLink__1NHh2\"};","import React from 'react';\r\nimport  s from'./Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n /*let s = {\r\n     'nav': 'Navbar_nav__3Rdw3',\r\n     'item': 'Navbar__item__2k32d'\r\n } */\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n        <div className={s.item}>\r\n         <NavLink to=\"/profile\" activeClassName={s.activeLink}> Profile</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n         <NavLink to=\"/dialogs\" activeClassName={s.activeLink} > Messages</NavLink>\r\n        </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink} > Users</NavLink>\r\n            </div>\r\n        <div  className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/news\" activeClassName={s.activeLink} > News</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/music\" activeClassName={s.activeLink} > Music</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/settings\" activeClassName={s.activeLink} > Settings</NavLink>\r\n        </div>\r\n      </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\rimport s from './News.module.css';\r\rtype NewsPropsType = {\r\r}\r\rconst News = (props: NewsPropsType) => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default News;","import React from 'react';\rimport s from './Music.module.css';\rconst Music = () => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default Music;","import React from 'react';\rimport s from './Settings.module.css';\r\rtype SettingsPropsType = {\r\r}\r\rconst Settings = (props: SettingsPropsType) => {\r    return (\r        <div>\r        </div>\r\r    )\r}\r\rexport default Settings;","const UPDATE_NEW_MESSAGE_BODY = \"UPDATE_NEW_MESSAGE_BODY\";\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesPropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogsStateType = {\r\n    dialogs: Array<DialogsPropsType>\r\n    messages:  Array<MessagesPropsType>\r\n    newMessageBody: string\r\n}\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Viktor\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Andrew\"},\r\n        {id: 5, name: \"Sasha\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your It-kamasutra? \"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\nexport type sendMessageAC = {\r\n    type: \"SEND_MESSAGE\"\r\n}\r\nexport type updateMessageAC = {\r\n    type: \"UPDATE_NEW_MESSAGE_BODY\"\r\n    body: string\r\n}\r\n\r\nexport type actionsMessageType = sendMessageAC | updateMessageAC\r\nconst dialogsReducer = (state: DialogsStateType = initialState, action: actionsMessageType): DialogsStateType => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageBody: action.body}\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: \"\",\r\n                messages: [...state.messages,\r\n                    {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE} as const)\r\nexport const updateNewMessageBodyCreator = (body: string) =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: body} as const)\r\n\r\nexport default dialogsReducer;","import React from 'react';\rimport s from './../Dialogs.module.css';\rimport {NavLink} from \"react-router-dom\";\r\rtype DialogItemPropsType = {\r    id: number\r    name: string\r}\r\rconst DialogItem = (props: DialogItemPropsType) => {\r    let path = \"/dialogs/1\" + props.id;\r\r    return  <div className={s.dialog + ' ' + s.active}>\r        <NavLink to={path}>{props.name}</NavLink>\r    </div>\r}\r\r\rexport default DialogItem;","import React from 'react';\rimport s from './../Dialogs.module.css';\r\rtype MessagePropsType = {\r    message: string\r}\r\rconst Message = (props: MessagePropsType) => {\r    return <div className=\"message\">{props.message}</div>\r}\r\r\r\rexport default Message","import React, {ChangeEvent} from 'react';\rimport s from './Dialogs.module.css';\rimport DialogItem from \"./DialogItem/DialogItem\";\rimport Message from \"./Message/Message\";\rimport {DialogPageType} from \"../../Redux/store\";\rimport { Redirect } from 'react-router-dom';\r\r\rtype StatePropsType = {\r    dialogsPage: DialogPageType\r    sendMessage: () => void\r    updateNewMessageBody: (text: string) => void\r    isAuth: boolean\r};\r\rconst Dialogs: React.FC<StatePropsType> = (props) => {\r\r    /*let state = props.dialogsPage;*/\r    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r    let messagesElements = props.dialogsPage.messages.map(m  => <Message message={m.message} key={m.id}/>);\r    let newMessageBody = props.dialogsPage.newMessageBody;\r    let onSendMessageClick = () => {\r        props.sendMessage();\r    }\r    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r       let body = e.currentTarget.value;\r       props.updateNewMessageBody(body);\r    }\r\r    if (!props.isAuth) return <Redirect to=\"/login\"/>\r\r    return (\r        <div className={s.dialogs}>\r            <div className={s.dialogsItems}>\r                {dialogsElements}\r            </div>\r            <div className=\"messages\">\r                <div>{messagesElements}</div>\r                <div>\r                    <div><textarea\r                        onChange={onNewMessageChange}\r                        value={newMessageBody}\r                        placeholder='Enter your message'>\r                    </textarea></div>\r                    <div>\r                        <button onClick={onSendMessageClick}>Send</button>\r                    </div>\r                </div>\r            </div>\r        </div>\r    )\r}\r\rexport default Dialogs;","import React from 'react'\r\nimport {Redirect} from 'react-router'\r\nimport {RootStateRedux} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n type MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsWithRedirect = (state: RootStateRedux)/*: MapStateToPropsType*/ => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapStatePropsType)\r\n\r\nexport function withAuthRedirect <P> (Component: React.ComponentType<P>){\r\n    const RedirectComponent: React.FC<MapStatePropsType > = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to=\"/login\"/>\r\n\r\n         return <Component {...restProps as P}/>\r\n    }\r\n\r\n   let ConnectAuthRedirectComponent = connect(mapStateToPropsWithRedirect)(RedirectComponent)\r\n\r\n    return ConnectAuthRedirectComponent\r\n}","import React from 'react';\rimport { DialogsStateType, sendMessageCreator, updateNewMessageBodyCreator} from \"../../Redux/dialogs-reducer\";\rimport Dialogs from \"./Dialogs\";\rimport {connect} from \"react-redux\";\rimport {RootStateRedux} from \"../../Redux/redux-store\";\rimport {Dispatch} from \"redux\";\rimport {Redirect} from \"react-router-dom\";\rimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\r\rtype MapStateToPropsType = {\r    dialogsPage: DialogsStateType\r    //isAuth: boolean\r}\r\rtype MapDispatchToPropsType = {\r    sendMessage: () => void\r    updateNewMessageBody: (body: string) => void\r}\r\rexport type sendMessageActionCreatorType = {\r    sendMessageCreator: (type: \"SEND_MESSAGE\") => void\r\r}\rexport type updateNewMessageBodyCreatorType = {\r    updateNewMessageBodyCreator: (type: \"UPDATE_NEW_MESSAGE_BODY\", body: string) => void\r}\r\r\rexport type DispatchPropsType = sendMessageActionCreatorType | updateNewMessageBodyCreatorType\r\r   let mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r    return {\r        dialogsPage: state.dialogsPage\r       // isAuth: state.auth.isAuth\r    }\r }\r   let mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r    return {\r        sendMessage: () => {\r            dispatch(sendMessageCreator());\r        },\r        updateNewMessageBody: (body: string) => {\r            dispatch(updateNewMessageBodyCreator(body));\r        }\r    }\r}\r\rlet AuthRedirectComponent = withAuthRedirect(Dialogs)\r\rconst DialogsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\r\rexport default DialogsContainer;","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"e08e1901-cb67-4f8e-968d-12deec271219\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 10) => {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: number) {\r\n      return instance.post(`follow/${userId}`)\r\n  },\r\n    unfollow(userId: number) {\r\n      return instance.delete(`follow/${userId}`)\r\n  },\r\n    getProfile(userId: number) {\r\n       return  instance.get(`profile/` + userId)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}\r\n","import {UserType} from \"../types\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type FollowACType = {\r\n    type: 'FOLLOW'\r\n    usersId: number\r\n}\r\nexport type UnFollowACType = {\r\n    type: 'UNFOLLOW'\r\n    usersId: number\r\n}\r\nexport type SetUsersACType = {\r\n    type: 'SET_USERS'\r\n    users: UserType[]\r\n}\r\nexport type SetCurrentPageACType = {\r\n    type: 'SET_CURRENT_PAGE'\r\n    currentPage: number\r\n}\r\nexport type SetUsersTotalCountACType = {\r\n    type: 'SET_TOTAL_USERS_COUNT'\r\n    count: number\r\n}\r\nexport type toggleIsFetchingACType = {\r\n    type: 'TOGGLE_IS_FETCHING'\r\n    isFetching: boolean\r\n}\r\nexport type toggleFollowingProgressACType = {\r\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport type UsersACType = FollowACType | UnFollowACType |\r\n    SetUsersACType | SetCurrentPageACType |\r\n    SetUsersTotalCountACType | toggleIsFetchingACType | toggleFollowingProgressACType\r\n\r\nlet initialState = {\r\n    users: [ ] as UserType[],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\ntype InitialState = typeof initialState;\r\n\r\nconst usersReducer = (state = initialState, action: UsersACType): InitialState => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.usersId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.usersId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case  SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case  SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case  TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case  \"TOGGLE_IS_FOLLOWING_PROGRESS\": {\r\n            return {...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress,  action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (usersId: number): FollowACType => ({type: FOLLOW, usersId})\r\nexport const unfollowSuccess = (usersId: number): UnFollowACType => ({type: UNFOLLOW, usersId})\r\nexport const setUsers = (users: Array<UserType>): SetUsersACType => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetUsersTotalCountACType => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount})\r\nexport const toggleIsFetching = (isFetching: boolean): toggleIsFetchingACType  => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): toggleFollowingProgressACType  => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId})\r\n\r\n\r\n export const getUsers = (currentPage: number, pageSize:number) => {  //ThunkCreator\r\n          return (dispatch: any) => {\r\n          dispatch(toggleIsFetching(true))\r\n\r\n          usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n              dispatch(toggleIsFetching(false))\r\n              dispatch(setUsers(data.items))\r\n              dispatch(setTotalUsersCount(data.totalCount))\r\n          })\r\n      }\r\n}\r\n\r\nexport const follow = (userId: number) => {  //ThunkCreator\r\n          return (dispatch: any) => {\r\n             dispatch(toggleFollowingProgress(true, userId))\r\n              usersAPI.follow(userId)\r\n                  .then(response => {\r\n                      if(response.data.resultCode == 0) {\r\n                          dispatch(followSuccess(userId))\r\n                      }\r\n                      dispatch(toggleFollowingProgress(false, userId))\r\n                  })\r\n      }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {  //ThunkCreator\r\n    return (dispatch: any) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.unfollow(userId)\r\n            .then(response => {\r\n                if(response.data.resultCode == 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","export default __webpack_public_path__ + \"static/media/390poHMbqew.5605775c.jpg\";","import React from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../assets/images/390poHMbqew.jpg\";\r\nimport {MapDispatchToPropsType, MapStateToPropsType} from \"./UsersContainer\";\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {instance, usersAPI} from \"../api/api\";\r\nimport {UserType} from \"../types\";\r\n\r\ntype PropsType = {\r\n    onPageChanged: (p: number) => void\r\n    followingInProgress: number[]\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage:  (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport let Users = (props: PropsType ) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for(let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? styles.selectedPage: ''}\r\n                             onClick={ (e) => { props.onPageChanged(p) }}\r\n                >{p}</span>\r\n            })}\r\n        </div>\r\n        <div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n        <span>\r\n            <div>\r\n                <NavLink to={'./profile/' + u.id}>\r\n                     <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                </NavLink>\r\n            </div>\r\n             <div>{u.followed\r\n                 ?  <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                            onClick={() => { props.unfollow( u.id) }}>Unfollow</button>\r\n                 : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                           onClick={() => { props.follow(u.id) }}>Follow</button>}\r\n            </div>\r\n        </span>\r\n                    <span>\r\n                <span>\r\n                    <div>{u.fullName}</div>\r\n                    <div>{u.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{\"u.location.country\"}</div>\r\n                    <div>{\"u.location.city\"}</div>\r\n                </span>\r\n                </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Spin-1.4s-137px (1).509019ba.svg\";","import preloader from \"../images/Spin-1.4s-137px (1).svg\";\r\nimport React from \"react\";\r\n\r\n\r\nexport let Preloader = (props: any) => {\r\n    return <div style={{backgroundColor: 'white'}}>\r\n    <img src={preloader} />\r\n    </div>\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setUsers, setTotalUsersCount, toggleIsFetching,\r\n    unfollowSuccess, toggleFollowingProgress, getUsers, unfollow,\r\n} from \"../Redux/users-reducer\";\r\nimport {RootStateRedux} from \"../Redux/redux-store\";\r\nimport {UserType} from \"../types\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../assets/common/Preloader\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\n\r\n\r\nclass UsersContainer extends React.Component<MapDispatchToPropsType & MapStateToPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n\r\n            <Users\r\n                onPageChanged={this.onPageChanged}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                users={this.props.users}\r\n                isFetching={this.props.isFetching}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                followingInProgress={this.props.followingInProgress}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                setUsers={this.props.setUsers}\r\n                setCurrentPage={this.props.setCurrentPage}\r\n                setTotalUsersCount={this.props.setTotalUsersCount}\r\n                toggleIsFetching={this.props.toggleIsFetching}\r\n                toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                getUsers={this.props.getUsers}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nexport type MapStateToPropsType = {\r\n    users: UserType[],\r\n    currentPage: number\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    isAuth: boolean\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        currentPage: state.usersPage.currentPage,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n/* let mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n     return {\r\n         follow: (usersId: number) => {\r\n             dispatch(followAC(usersId))\r\n         },\r\n         unfollow: (usersId: number) => {\r\n             dispatch(unfollowAC(usersId))\r\n         },\r\n         setUsers: (users: Array<UserType>) => {\r\n             dispatch(setUsersAC(users))\r\n         },\r\n         setCurrentPage: (pageNumber: number) => {\r\n             dispatch(setCurrentPageAC(pageNumber))\r\n         },\r\n         setUsersTotalCount: (totalCount: number) => {\r\n             dispatch(setUsersTotalCountAC(totalCount))\r\n         },\r\n         toggleIsFetching: (isFetching: boolean) => {\r\n             dispatch(toggleIsFetchingAC(isFetching))\r\n         }\r\n     }\r\n }*/\r\n\r\nlet withRedirect = withAuthRedirect(UsersContainer)\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>\r\n(mapStateToProps, {follow, unfollow: unfollowSuccess, setCurrentPage, toggleFollowingProgress, getUsers, setUsers, setTotalUsersCount, toggleIsFetching})(withRedirect)\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../assets/common/Preloader\";\r\ntype ProfileInfoPropsType = {\r\n  profile: any\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n        <div className={s.img}>\r\n        <img src='https://sun9-36.userapi.com/impg/HZnWrqzamma2_Yw7xcSD-8XXR_IZKSxjJp0WNQ/EYak3s-RlnY\r\n.jpg?size=1080x1079&quality=96&proxy=1&sign=8743d906f74b4baec37a9fb4f8481d8a&type=album' />\r\n        </div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large}/>\r\n          ava + description\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\n\r\n\r\nexport type PostsPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileStateType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string,\r\n    profile: any\r\n}\r\nlet initialState: ProfileStateType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It is my first post\", likesCount: 11},\r\n        {id: 3, message: \"Blabla\", likesCount: 11},\r\n        {id: 4, message: \"Dada\", likesCount: 11}\r\n    ],\r\n    newPostText: \"\",\r\n    profile: null\r\n}\r\nexport type ProfileActionsPropsType = ReturnType<typeof addPost> |\r\n    ReturnType<typeof updateNewPostText> | setUserProfile\r\n\r\n\r\nconst profileReducer = (state: ProfileStateType = initialState, action: ProfileActionsPropsType): ProfileStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {...state, posts: [...state.posts, newPost]}\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {...state, newPostText: action.newText}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = () => ({\r\n    type: ADD_POST } as const)\r\n\r\nexport const setUserProfile = (profile: ProfileStateType) => ({\r\n    type: SET_USER_PROFILE,\r\n    profile} as const)\r\n\r\nexport const getUserProfile = (userId: number) => (dispatch: any) => {\r\n      usersAPI.getProfile(userId)\r\n           .then(response => {\r\n           dispatch(setUserProfile(response.data))\r\n    })\r\n}\r\n\r\n export const updateNewPostText = (text: string) => ({\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: text} as const)\r\n\r\n export type setUserProfile = {\r\n    type: 'SET_USER_PROFILE',\r\n    profile: any\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType ) => {\r\n    return (\r\n         <div className={s.item}>\r\n             <img src='https://sun9-35.userapi.com/impf/HLP5CRTKbRvZisagdIWhrAzNRGxoFve9ZFJwLQ/ezCvng_UZZM.jpg?size=864x1080&quality=96&sign=439b5cff05a0cf4601e2b7c9f7625386&type=album' />\r\n             {props.message}\r\n             <div> <span>like</span> {props.likesCount}\r\n              </div>\r\n          </div>\r\n          \r\n    );\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostsPropsType} from \"../../Redux/profile-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../Redux/redux-store\";\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string\r\n    addPost: () => void\r\n    // onPostChange: (text: string) => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst MyPosts = (props:MyPostsPropsType) => {\r\n\r\n    let postsElements =\r\n       props.posts.map((p, i) => <Post key={i} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            props.updateNewPostText(e.currentTarget.value);\r\n    }\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3> My posts </h3>\r\n                <div>\r\n                    <div>\r\n                        <textarea onChange={onPostChange} value={props.newPostText}/>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onAddPost}>Add post</button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n}\r\nexport default MyPosts","import React from 'react';\r\nimport {addPost, PostsPropsType, updateNewPostText} from \"../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {\r\n    connect,\r\n} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../Redux/redux-store\";\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    posts: Array<PostsPropsType>\r\n    newPostText: string\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n// /*const mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n//     return {\r\n//         updateNewPostText: (text: string) => {\r\n//             let action = updateNewPostTextActionCreator(text);\r\n//             dispatch(action)\r\n//         },\r\n//         addPost: () => {\r\n//             dispatch(addPostActionCreator());\r\n//         }\r\n//     }\r\n// }*/\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateRedux>\r\n(mapStateToProps, {addPost, updateNewPostText})(MyPosts) /*as ConnectedComponent<any, {}>*/","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nexport type ProfilePropsType = {\r\n      profile: any\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}/>\r\n           <MyPostsContainer />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {RootStateRedux} from \"../Redux/redux-store\";\r\nimport {getUserProfile} from \"../Redux/profile-reducer\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToPropsType = {\r\n   /* setUserProfile: (data: any) => void*/\r\n    getUserProfile: (userId: number ) => void\r\n}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\ntype AllPropsType = RouteComponentProps<PathParamsType> & PropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<AllPropsType> {\r\n    componentDidMount() {\r\n    let userId: number | undefined = this.props.match.params.userId ? Number(this.props.match.params.userId): undefined\r\n    if(!userId){\r\n        userId = 2\r\n    }\r\n    this.props.getUserProfile(userId)\r\n}\r\n    render() {\r\n\r\n\r\n    return (\r\n        <Profile {...this.props} profile={this.props.profile}/>\r\n    );\r\n  }\r\n}\r\n\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\nlet mapStateToProps = (state: RootStateRedux)/*: MapStateToPropsType*/ => ({\r\n    profile: state.profilePage.profile,\r\n    // isAuth: state.auth.isAuth\r\n})\r\n  let WithUrlDataContainerComponent  = withRouter(AuthRedirectComponent)\r\n\r\n\r\nexport default connect(mapStateToProps, {getUserProfile}) (WithUrlDataContainerComponent)","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type HeaderPropsType = {\r\n  //  setAuthUserData: (id: number, email: string, login: string, isAuth: boolean) => void\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='https://sun9-44.userapi.com/impf/c856136/v856136281/a9770/7RBeaUJ9A98.jpg?size=767x767&quality=96&proxy=1&sign=265e2a0e0a64547c891841d58ef10c51&type=album'/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                              ? props.login\r\n                              : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>);\r\n}\r\nexport default Header;","import {authAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nexport type InitialStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\n\r\nconst authReducer = (state = initialState, action: SetUserDataActionType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport type SetUserDataActionType = ReturnType<typeof setAuthUserData>\r\n\r\nexport const setAuthUserData = (usersId: number, email: string, login: string, isAuth: boolean) => ({type: SET_USER_DATA, data:{usersId, email,login, isAuth} } as const)\r\n\r\n export const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                setAuthUserData(id, email, login, true)\r\n            }\r\n        })\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateRedux} from \"../Redux/redux-store\";\r\nimport {getAuthUserData} from \"../Redux/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    //setAuthUserData: (id: number, email: string, login: string, isAuth: boolean) => void\r\n    isAuth: boolean\r\n    login: string | null\r\n    getAuthUserData: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header /*setAuthUserData={this.props.setAuthUserData}*/\r\n            isAuth={this.props.isAuth}\r\n            login={this.props.login}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux ) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {getAuthUserData})(HeaderContainer)","import React from 'react'\r\n\r\nexport const Login = (props: any) => {\r\n    return <h1>Login</h1>\r\n}","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar/Navbar';\nimport News from \"./Profile/News/News\";\nimport Music from \"./Profile/Music/Music\";\nimport Settings from './Profile/Settings/Settings';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport DialogsContainer from \"./Profile/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Users/UsersContainer\";\nimport ProfileContainer from \"./Profile/ProfileContainer\";\nimport HeaderContainer from \"./Header/HeaderContainer\";\nimport {Login} from \"./Login/Login\";\n\n\nconst App = (props: any) => {\n\n    return (\n        <BrowserRouter>\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n\n                    <Route path='/dialogs'\n                           render={() => <DialogsContainer/>}/>\n                    <Route path='/profile/:userId?'\n                           render={() => <ProfileContainer/>}/>\n                    <Route path='/users'\n                           render={() => <UsersContainer/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='/dialogs' render={() => <News/>}/>\n                    <Route path='/profile' render={() => <Music/>}/>\n                    <Route path='/dialogs' render={() => <Settings/>}/>\n\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nexport type SidebarStateType = {\r\n\r\n}\r\nlet initialState: SidebarStateType = {}\r\n\r\nconst sidebarReducer = (state: SidebarStateType = initialState, action: any): SidebarStateType => {\r\n\r\n\r\n    return state;\r\n}\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage:  profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer\r\n})\r\n// export type DispatchPropsType1 = typeof store.dispatch\r\nexport type RootStateRedux = ReturnType<typeof rootReducer>\r\nlet store: Store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./Redux/redux-store\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n/*\n\nReactDOM.render() {\n    return (\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>, document.getElementById('root')\n    )\n}\n*/\nReactDOM.render( <BrowserRouter>\n    <Provider store={store}>\n        <App/>\n    </Provider>\n</BrowserRouter>, document.getElementById('root'));\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}