{"version":3,"sources":["utilities/validators/Validators.tsx","assets/images/Spin-1.4s-137px (1).svg","assets/common/Preloader.tsx","api/profile-api.ts","redux/profile/profile-reducer.ts","assets/images/114-1149878_setting-user-avatar-in-specific-size-without-breaking.png","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","components/Header/Header.module.css","api/api.ts","reportWebVitals.js","assets/common/Paginator/Paginator.tsx","components/Users/User.tsx","utilities/object-helpers.ts","api/users-api.ts","redux/users/users-reducer.ts","redux/users/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","components/Login/LoginForm.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/auth-selectors.ts","components/Header/AppHeader.tsx","App.tsx","index.tsx","assets/common/FormsControls/FormsControls.tsx","components/Users/Users.module.css","assets/common/FormsControls/FormsControls.module.css","assets/common/Paginator/Paginator.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","props","style","backgroundColor","src","preloader","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","newPostText","actions","addPost","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","newMessageBody","dialogsReducer","body","sendMessageCreator","subscribers","ws","closeHandler","console","log","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","chatReducer","payload","map","m","v1","index","array","_newMessageHandler","newMessagesHandlerCreator","messagesReceived","_statusChangedHandler","statusChangedHandlerCreator","statusChanged","startMessagesListening","stopMessagesListening","sendMessage","module","exports","ResultCodeEnum","ResultCodeForCaptcha","axios","create","withCredentials","baseURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","cn","styles","paginator","btn","onClick","selectedPage","pageNumber","User","user","followingInProgress","unfollow","follow","to","small","userPhoto","followed","disabled","some","fullName","updateObjectInArray","item","itemId","objPropName","newObjProps","u","usersAPI","getUsers","term","friend","post","delete","users","totalUsersCount","isFetching","count","items","totalCount","getUsersState","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","option","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","UsersPage","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","getAuthUserData","response","Success","getCaptchaUrl","url","LoginReduxForm","reduxForm","form","handleSubmit","createField","Input","alt","formSummaryError","Login","padding","margin","textTransform","CaptchaIsRequired","initialized","globalError","initializedSuccess","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersId","formReducer","app","chat","store","createStore","applyMiddleware","thunkMiddleware","window","withSuspense","WrappedComponent","Suspense","fallback","selectIsAuth","selectCurrentUserLogin","AppHeader","Header","Layout","header","span","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","color","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","AppContainer","compose","withRouter","connect","initializeApp","promise","all","catchAllUnhandledErrors","alert","position","top","textAlign","width","SubMenu","Menu","Content","Footer","Sider","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","SamuraiJSApp","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","textarea","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.2df44bc4.chunk.js","sourcesContent":["import React from \"react\"\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n   if(value) return undefined ;\r\n   return \"Field is required!\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType  => (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols` ;\r\n\r\n    return undefined;\r\n}","export default __webpack_public_path__ + \"static/media/Spin-1.4s-137px (1).509019ba.svg\";","import preloader from \"../images/Spin-1.4s-137px (1).svg\";\r\nimport React from \"react\";\r\n\r\n\r\nexport let Preloader = (props: any) => {\r\n    return <div style={{backgroundColor: ''}}>\r\n        <img src={preloader}/>\r\n    </div>\r\n}","import {instance, APIResponseType} from \"./api\";\r\nimport {PhotosType, ProfileType} from \"../types\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        let formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}","import {PhotosType, PostsPropsType, ProfileType} from \"../../types\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {profileAPI} from \"../../api/profile-api\";\r\nimport {BaseThunkType, InferActionsType} from \"../redux-store\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"5 Secret features of JSON.stringify()\", likesCount: 1273893},\r\n        {id: 2, message: \"Use Chrome DevTools Like a Senior Frontend Developer\", likesCount: 258743},\r\n        {id: 3, message: \" 7 really good reasons not to use TypeScript\", likesCount: 67844},\r\n        {id: 4, message: \"19 things I stole from great developers\", likesCount: 2682167}\r\n    ] as Array<PostsPropsType>,\r\n    newPostText: \"\",\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD_POST': {\r\n            let newPost = {id: 5, message: action.newPostText, likesCount: 0};\r\n            return {...state, posts: [...state.posts, newPost], newPostText: ''}\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'SN/PROFILE/DELETE_POST': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        case 'SN/PROFILE/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    addPost: (newPostText: string) => ({type: 'SN/PROFILE/ADD_POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\n\r\n// THUNK CREATORS\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile);\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = InferActionsType<typeof actions>\r\nexport type InitialStateType = typeof initialState\r\nexport type ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\nexport default profileReducer;","export default __webpack_public_path__ + \"static/media/114-1149878_setting-user-avatar-in-specific-size-without-breaking.e582e4ba.png\";","import {InferActionsType} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Viktor\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Andrew\"},\r\n        {id: 5, name: \"Sasha\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hello,How are you today? How may I help you? :)\"},\r\n        {id: 2, message: \"Hey! I'm fine. Thanks for asking! \"},\r\n        {id: 3, message: \"I have a question about your product. \"},\r\n        {id: 4, message: \"Could you help me?\"},\r\n        {id: 5, message: \" of course, what's the problem?\"}\r\n    ],\r\n    newMessageBody: \"\"\r\n}\r\n\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND_MESSAGE\":\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    sendMessageCreator: (newMessageBody: string) => ({type: \"SN/DIALOGS/SEND_MESSAGE\", newMessageBody} as const)\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = InferActionsType<typeof actions>\r\nexport type InitialStateType = typeof initialState\r\n","import {StatusType} from \"../redux/chat-reducer\";\r\n\r\nconst subscribers = {\r\n    \"messages-received\": [] as MessagesReceivedSubscriberType[],\r\n    \"status-changed\": [] as StatusChangedSubscriberType[]\r\n};\r\n\r\nlet ws: WebSocket | null = null;\r\nconst closeHandler = () => {\r\n    console.log(\"CLOSE WS\");\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000);\r\n};\r\n\r\n\r\nlet messageHandler = (e: MessageEvent) => {\r\n    let newMessages = JSON.parse(e.data);\r\n    subscribers[\"messages-received\"].forEach(s => s(newMessages));\r\n};\r\n\r\n\r\nlet openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n};\r\n\r\nlet errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n};\r\n\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener(\"close\", closeHandler);\r\n    ws?.removeEventListener(\"message\", messageHandler);\r\n    ws?.removeEventListener(\"open\", openHandler);\r\n    ws?.removeEventListener(\"error\", errorHandler);\r\n};\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers[\"status-changed\"].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp();\r\n    ws?.close();\r\n    ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\\n\");\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener(\"close\", closeHandler);\r\n    ws.addEventListener(\"message\", messageHandler);\r\n    ws.addEventListener(\"open\", openHandler);\r\n    ws.addEventListener(\"error\", errorHandler);\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel();\r\n    },\r\n    stop() {\r\n        subscribers[\"messages-received\"] = [];\r\n        subscribers[\"status-changed\"] = [];\r\n        cleanUp();\r\n        ws?.close();\r\n    },\r\n    subscribe(eventName: EventNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback);\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback);\r\n        };\r\n    },\r\n    unsubscribe(eventName: EventNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback);\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message);\r\n    }\r\n};\r\n\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\n\r\ntype EventNamesType = \"messages-received\" | \"status-changed\" ;\r\n","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {chatAPI, ChatMessageAPIType} from \".././api/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FormAction} from \"redux-form\";\r\nimport { v1 } from \"uuid\";\r\n\r\n\r\nexport type StatusType = \"pending\" | \"ready\" | \"error\";\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: \"pending\" as StatusType\r\n};\r\n\r\n\r\nexport type ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nexport const chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"SN/CHAT/MESSAGES_RECEIVED\":\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m,id: v1()}))]\r\n                    .filter((m,index,array) => index >= array.length - 100)\r\n            };\r\n        case \"SN/CHAT/STATUS_CHANGED\":\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// THUNK CREATOR\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null;\r\nconst newMessagesHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages));\r\n        };\r\n    }\r\n\r\n    return _newMessageHandler;\r\n};\r\n\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status));\r\n        };\r\n    }\r\n\r\n    return _statusChangedHandler;\r\n};\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start();\r\n    chatAPI.subscribe(\"messages-received\", newMessagesHandlerCreator(dispatch));\r\n    chatAPI.subscribe(\"status-changed\", statusChangedHandlerCreator(dispatch));\r\n};\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe(\"messages-received\", newMessagesHandlerCreator(dispatch));\r\n    chatAPI.unsubscribe(\"status-changed\", statusChangedHandlerCreator(dispatch));\r\n    chatAPI.stop();\r\n};\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message);\r\n};\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: \"SN/CHAT/MESSAGES_RECEIVED\",\r\n        payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: \"SN/CHAT/STATUS_CHANGED\",\r\n        payload: {status}\r\n    } as const)\r\n};\r\n\r\n// TYPES\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3WY8I\",\"loginBlock\":\"Header_loginBlock__1ARoA\"};","import axios from \"axios\";\r\nimport {UserType} from \"../types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"bcdf24e0-2cad-40e4-be67-f9d4eea9b547\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: string[]\r\n    resultCode: RC\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\nimport { Pagination } from 'antd';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport let Paginator: React.FC<PropsType> = ({\r\n                                                 totalItemsCount,\r\n                                                 pageSize,\r\n                                                 currentPage = 1,\r\n                                                 onPageChanged = x => x,\r\n                                                 portionSize = 10\r\n                                             }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    // <Pagination/>\r\n\r\n    return <div className={cn(styles.paginator)}>\r\n        {portionNumber > 1 &&\r\n        <button className={styles.btn} onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}\r\n                >{p}</span>\r\n            })}\r\n\r\n        {portionCount > portionNumber &&\r\n        <button className={styles.btn} onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>\r\n        }\r\n\r\n\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/114-1149878_setting-user-avatar-in-specific-size-without-breaking.png\";\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {UserType} from \"../../types\";\r\nimport { Button } from \"antd\";\r\nimport s from \"./Users.module.css\"\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nexport let User: React.FC<UserPropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return <div>\r\n        <span>\r\n             <div>\r\n                <NavLink to={'./profile/' + user.id}>\r\n                     <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                </NavLink>\r\n            </div>\r\n             <div>{user.followed\r\n                 ? <button className={s.btn} disabled={followingInProgress.some(id => id === user.id)}\r\n                           onClick={() => {\r\n                               unfollow(user.id)\r\n                           }}>Unfollow</button>\r\n                 : <button className={s.btn} disabled={followingInProgress.some(id => id === user.id)}\r\n                           onClick={() => {\r\n                               follow(user.id)\r\n                           }}>Follow</button>}\r\n            </div>\r\n        </span>\r\n        <span>\r\n                <span>\r\n                    <div>{user.fullName}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    {/*<div>{\"user.location.country\"}</div>*/}\r\n                    {/*<div>{\"user.location.city\"}</div>*/}\r\n                </span>\r\n         </span>\r\n    </div>\r\n}\r\n","type MakeKeysOptional<T extends {}> = {[Property in keyof T]?: T[Property]}\r\n\r\nexport const updateObjectInArray = <T extends {}>(item: T[], itemId: T[keyof T], objPropName: keyof T, newObjProps: MakeKeysOptional<T>): T[] => {\r\n    return item.map((u) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 10,term: string = \"\",friend: null | boolean = null) => {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n    // getProfile(userId: number) {\r\n    //     console.warn('Obsolete method.Please profileAPI object.')\r\n    //     return profileAPI.getProfile(userId)\r\n    // }\r\n}\r\n","import {UserType} from \"../../types\";\r\nimport {updateObjectInArray} from \"../../utilities/object-helpers\";\r\nimport {BaseThunkType, InferActionsType} from \"../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../api/users-api\";\r\nimport {APIResponseType} from \"../../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.usersId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.usersId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case  'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case  'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"SN/USERS/SET_FILTER\": {\r\n            return {\r\n                ...state,filter: action.payload\r\n            }\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    followSuccess: (usersId: number) => ({type: 'SN/USERS/FOLLOW', usersId} as const),\r\n    unfollowSuccess: (usersId: number) => ({type: 'SN/USERS/UNFOLLOW', usersId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER',payload: filter } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => (\r\n        {type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => (\r\n        {type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const)\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const getUsers = (currentPage: number, pageSize: number,filter: FilterType): ThunkType => {  //ThunkCreator\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(currentPage, pageSize,filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                          userId: number,\r\n                                          apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                          actionCreator: (userId: number) => ActionsType) => {\r\n    try {\r\n        dispatch(actions.toggleFollowingProgress(true, userId))\r\n        let data = await apiMethod(userId);\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actionCreator(userId))\r\n        }\r\n    } finally {\r\n        dispatch(actions.toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {  //ThunkCreator\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {  //ThunkCreator\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type ActionsType = InferActionsType<typeof actions>\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = BaseThunkType<ActionsType>\r\nexport type InitialStateType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;","import {RootStateRedux} from \"../redux-store\";\r\n\r\nexport const getUsersState = (state: RootStateRedux) => {\r\n    return state.usersPage.users\r\n}\r\n/*export const getUsersSelector = (state: RootStateRedux) => {\r\n    return getUsersState(state).filter(u => true)\r\n}\r\nexport const getUsersSuperSelector = createSelector(getUsersState,getIsFetching,(users,isFetching) => {\r\n    return users.filter(u => true)\r\n})*/\r\nexport const getPageSize = (state: RootStateRedux) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: RootStateRedux) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: RootStateRedux) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: RootStateRedux) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: RootStateRedux) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: RootStateRedux) => {\r\n    return state.usersPage.filter\r\n}\r\n/*\r\nexport const getIsAuth = (state: RootStateRedux) => {\r\n    return state.usersPage.isAuth\r\n}*/\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users/users-selectors\";\r\nimport s from \"./Users.module.css\"\r\n\r\nexport const usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\nexport type FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\nexport type PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo(props => {\r\n\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (setSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        };\r\n\r\n        props.onFilterChanged(filter);\r\n        setSubmitting(false);\r\n    };\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option className={s.option} value={\"null\"}>All</option>\r\n                        <option value={\"true\"}>only followed</option>\r\n                        <option value={\"false\"}>only unfollowed</option>\r\n                    </Field>\r\n                    <button className={s.btn} type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>;\r\n});","import React, {useEffect} from \"react\";\r\nimport {Paginator} from \"../../assets/common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\nimport {FilterType, getUsers} from \"../../redux/users/users-reducer\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersFilter,\r\n    getUsersState\r\n} from \"../../redux/users/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const users = useSelector(getUsersState)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if(!!parsed.term) actualFilter = {...actualFilter,term: parsed.term as string}\r\n        switch(parsed.friend){\r\n            case \"null\":\r\n                actualFilter = {...actualFilter,friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter,friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter,friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n\r\n        const query: QueryParamsType = {}\r\n\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n\r\n        history.push({\r\n            pathname: \"/users\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    },[filter,currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsers(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n        <Paginator totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize}\r\n                   currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}\r\n        />\r\n        <div>\r\n            {users.map(u => <User key={u.id}\r\n                                  user={u}\r\n                                  unfollow={unfollow}\r\n                                  follow={follow}\r\n                                  followingInProgress={followingInProgress}/>)}\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../../assets/common/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users/users-selectors\";\r\n\r\n\r\ntype UsersPagePropsType = {}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        {isFetching ? <Preloader/> : null}\r\n\r\n        <Users/>\r\n    </>\r\n}","import {instance, APIResponseType, ResultCodeEnum, ResultCodeForCaptcha} from \"./api\";\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeEnum | ResultCodeForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}","import {instance} from \"./api\";\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}","import {ResultCodeEnum, ResultCodeForCaptcha} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsType} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n        {type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => (\r\n        {type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const),\r\n\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n\r\n    if (response.data.resultCode === ResultCodeEnum.Success) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0\r\n            ? data.messages[0]\r\n            : \"some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | ReturnType<typeof stopSubmit>>\r\n","import React from 'react'\r\nimport {reduxForm} from \"redux-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginForm, PropsType} from \"./LoginForm\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, PropsType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginToPropsType = {}\r\n\r\nexport type LoginFormValuesType = {\r\n    password: string\r\n    email: string\r\n    rememberMe: boolean\r\n    captchaUrl: string\r\n}\r\nexport const Login: React.FC<LoginToPropsType> = () => {\r\n\r\n    const captchaUrl = useSelector((state: RootStateRedux) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: RootStateRedux) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captchaUrl))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1 style={{padding: \"20px\", margin:\"10px\",textTransform: \"uppercase\"}}>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n\r\n\r\n","import {required} from \"../../utilities/validators/Validators\";\r\nimport {createField, Input, GetStringKeys} from \"../../assets/common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\nimport s from \"../../assets/common/FormsControls/FormsControls.module.css\";\r\nimport {InjectedFormProps} from \"redux-form\";\r\nimport {LoginFormValuesType} from \"./Login\";\r\n\r\nexport type PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, PropsType> & PropsType> = ({\r\n                                                                                                       handleSubmit,\r\n                                                                                                       error,\r\n                                                                                                       captchaUrl\r\n                                                                                                   }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt={\"not found\"}/>}\r\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button className={s.btn}>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport type LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    globalError: null\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK CREATOR\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess())\r\n        })\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\n// TYPES\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\n// type ThunkType = BaseThunkType<ActionsType>\r\n","type SidebarStateType = typeof initialState\r\nlet initialState = {};\r\n\r\nexport const sidebarReducer = (state = initialState, action: any): SidebarStateType => {\r\n\r\n    return state;\r\n};\r\n\r\n","import {Action, applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport profileReducer from \"./profile/profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport {chatReducer} from \"./chat-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {usersReducer} from \"./users/users-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n});\r\n\r\nexport type RootStateRedux = ReturnType<typeof rootReducer>\r\nlet store: Store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// type PropertiesTypes<T> = T extends { [key: string] : infer U } ? U : never\r\n// export type InferActionsType<T extends { [key: string] : (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type InferActionsType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, RootStateRedux, unknown, A>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from \"react\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>)  {\r\n\r\n     return (props: WCP) => {\r\n         return <React.Suspense fallback={<div>loading...</div>}>\r\n             <WrappedComponent {...props}/>\r\n         </React.Suspense>\r\n     }\r\n}","import {RootStateRedux} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state: RootStateRedux) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectCurrentUserLogin = (state: RootStateRedux) => {\r\n    return state.auth.login\r\n}","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nexport type HeaderPropsType = {\r\n\r\n    // logout: () => void\r\n}\r\n\r\nexport const AppHeader: React.FC<HeaderPropsType> = () => {\r\n\r\n    const isAuth = useSelector<RootStateRedux>(selectIsAuth)\r\n    const login = useSelector<RootStateRedux>(selectCurrentUserLogin)\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout;\r\n\r\n    return (<Header className={s.header}>\r\n        <div className=\"logo\"/>\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><Link to=\"/users\"> Developers</Link></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col span={3}>\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                            <span style={{color: \"White\"}}> {login} </span>\r\n                        </Col>\r\n                        <Col span={3}>\r\n                            <Button onClick={logoutCallback}>Log out</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={6}>\r\n                        <Button>\r\n                            <Link to={'/login'}>Login</Link>\r\n                        </Button>\r\n                    </Col>}\r\n        </Row>\r\n    </Header>)\r\n}\r\n/*\r\n         {/!*<img src='https://p7.hiclipart.com/preview/799/906/393/web-development-angularjs-react-front-and-back-ends-satelite-thumbnail.jpg'/>*!/}\r\n         <img\r\n             src='https://p1.hiclipart.com/preview/570/557/170/react-logo-redux-javascript-vuejs-babel-nodejs-npm-web-application-png-clipart.jpg'/>\r\n         <div className={s.loginBlock}>\r\n             {props.isAuth\r\n                 ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                 : <NavLink to={'/login'}>Login</NavLink>}\r\n         </div> */\r\n\r\n\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css'\nimport {Breadcrumb, Layout, Menu} from 'antd';\nimport {LaptopOutlined, UserOutlined,NotificationOutlined} from '@ant-design/icons';\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {UsersPage} from \"./components/Users/UsersContainer\";\nimport {Login} from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport store, {RootStateRedux} from \"./redux/redux-store\";\nimport {Preloader} from \"./assets/common/Preloader\";\nimport {compose} from \"redux\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport {AppHeader} from \"./components/Header/AppHeader\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Profile/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'));\n\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\n\ntype MapStateToPropsType = {\n    initialized: boolean\n}\ntype MapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\nconst App: React.FC<PropsType> = ({initialized, initializeApp}) => {\n\n\n    let catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occured')\n    }\n\n    useEffect(() => {\n        initializeApp();\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors);\n        window.removeEventListener('unhandledrejection', catchAllUnhandledErrors)\n    }, [])\n\n    if (!initialized) {\n        return  <div style={{position: \"fixed\", top: \"30%\", textAlign:\"center\", width: \"100%\"}}><Preloader /></div>\n    }\n\n    const { SubMenu } = Menu;\n    const { Content, Footer, Sider } = Layout;\n\n    return (\n        <Layout>\n            <AppHeader/>\n            <Content style={{ padding: '0 50px' }}>\n                <Breadcrumb style={{ margin: '16px 0' }}>\n                    <Breadcrumb.Item>Home</Breadcrumb.Item>\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\n                    <Breadcrumb.Item>App</Breadcrumb.Item>\n                </Breadcrumb>\n                <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n                    <Sider className=\"site-layout-background\" width={200}>\n                        <Menu\n                            mode=\"inline\"\n                            defaultSelectedKeys={['1']}\n                           // defaultOpenKeys={['sub1']}\n                            style={{ height: '100%' }}\n                        >\n                            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My profile\">\n                                <Menu.Item key=\"1\"> <Link to=\"/profile\" > Profile</Link></Menu.Item>\n                                <Menu.Item key=\"2\"> <Link to=\"/dialogs\"> Messages</Link></Menu.Item>\n                            </SubMenu>\n                            <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\n                                <Menu.Item key=\"5\"><Link to=\"/users\"> Users</Link></Menu.Item>\n                            </SubMenu>\n                            <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"Messages\">\n                                <Menu.Item key=\"9\"><Link to=\"/chat\">Chat</Link></Menu.Item>\n                            </SubMenu>\n                        </Menu>\n                    </Sider>\n                    <Content style={{ padding: '0 24px', minHeight: 280 }}>\n                        <Switch>\n                            <Route exact path=\"/\"\n                                   render={() => <Redirect to={\"/profile\"}/>}/>\n                            <Route path='/dialogs'\n                                   render={() => <SuspendedDialogs/>}/>\n                            <Route path='/profile/:userId?'\n                                   render={() => <SuspendedProfile/>}/>\n                            <Route path='/users'\n                                   render={() => <UsersPage/>}/>\n                            <Route path='/login' render={() => <Login/>}/>\n                            <Route path='/chat' render={() => <SuspendedChatPage/>}/>\n                        </Switch>\n                    </Content>\n                </Layout>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Social Network ©2021 Created by Samurai Zhanat</Footer>\n        </Layout>\n    )\n}\n\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({\n    initialized: state.app.initialized\n})\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst SamuraiJSApp = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default SamuraiJSApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(<SamuraiJSApp/>\n    , document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport s from './FormsControls.module.css'\r\nimport {FieldValidatorType} from \"../../../utilities/validators/Validators\";\r\n\r\ntype FormsControlsPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormsControlsPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n\r\n    return <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea className={s.textarea} {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input className={s.input} {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | null,\r\n                                                         name: string,\r\n                                                         validators: FieldValidatorType[],\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         //component: (value: string) => (string | undefined),\r\n                                                         props = {},\r\n                                                         text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1nMrh\",\"selectedPage\":\"Users_selectedPage__35YmP\",\"btn\":\"Users_btn__2LpXE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__Ceuz6\",\"error\":\"FormsControls_error__2gDaN\",\"formSummaryError\":\"FormsControls_formSummaryError__r1pzm\",\"textarea\":\"FormsControls_textarea__2VN1o\",\"btn\":\"FormsControls_btn__2YZL-\",\"input\":\"FormsControls_input__uu352\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__245Xh\",\"pageNumber\":\"Paginator_pageNumber__2DhQX\",\"selectedPage\":\"Paginator_selectedPage__2JAKO\",\"btn\":\"Paginator_btn__1rK7p\"};"],"sourceRoot":""}